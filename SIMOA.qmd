---
title: "SIMOA"
author: "Pierre-Olivier Couture"
format: html
editor: visual
---

## Introduction

This is all the code I am going to use for my MSc thesis. I will have it broken down by the type of analysis I am running and rill include a description of everything I am doing. The large titles will represent what I am doing broadly and the labels in each 'chunk' of code will be more descriptive about what exactly I am doing in that chunk. Also, I will include a comment inside each chunk which will provide an even more detailed breakdown of what all the codes are doing. I may even include explanations mid-code to ensure everything is reproducible and will make it easier when this needs to be replicated later by myself for publication, or reviewers/MSc committee for confirmation of results.

## Packages

```{r}
#| label: Installing Packages
#| include: false
# Here I will include all the code I need to install the packages I need to 
# conduct my analysis. I will keep adding to this throughout my coding.

```

```{r}
#| label: Calling in the packages
#| include: false
# Here I will include all the code to call in the packages I have installed. 
# Again, I will update this everytime I need to call-in a new package throughout
# my coding.

library(readxl)
library(data.table)
library(dplyr)
library(tidyverse)
library(stringr)

```

## Load in the Data

```{r}
#| label: Creating SIMOA Object
#| include: false
# Here I will load in my data set. The excel file was cleaned because I removed
# the 6 participants who did not answer any questions or meet any of the age
# criteria so there is no way they could be included in the analysis. After
# I ask R to view the data set to ensure it has been properly imported from 
# excel. 

read_excel("SIMOA Data Cleaning 9 Jan POC.xlsx") -> SIMOA
View(SIMOA)

```

## Formatting the Data

```{r}
#| label: Rename all the columns of data
## Renaming all the columns to change them from a ...# format to meaningful text 
## to allow me to better keep track of the variables I am using in the analysis

colnames(SIMOA)[1:339] <- c(
  "Record ID",
  "Consent timestamp",
  "Survey Completion",
  "Complete?",
  "Are you 65 or older?",
  "In the past two (2) years, have you 'regularly' taken a BZRA",
  "Stopped taking these medications? Yes or No",
  "Attempted to reduce or stop taking your sleeping pills at least once in the past two years?",
  "Do you live in a nursing home or long-term care facility?",
  "Complete?",
  "Survey start timestamp",
  "What is your age?",
  "What is your sex?",
  "What is your gender identity?",
  "Select the province or territory in which you currently live.",
  "What is the highest level of education you completed?",
  "What is your employment status?",
  "How often do you drive?",
  "Which category matches your annual household income?",
  "With whom do you currently live? Select all that apply.",
  "OSSS_1",
  "OSSS_2",
  "OSSS_3",
  "OSSS-3_score",
  "Complete?",
  "Rate your general health compared to other people the same age as you.",
  "Which of the following SLEEP conditions apply to you? Select all that apply.",
  "When you have a problem with sleep, which of the following apply? Select all that apply",
  "Which of the following PHYSICAL health conditions apply to you?",
  "Which of the following MENTAL health conditions do you live with?",
  "Count of health conditions, MANUAL calculation", 
  "PHQ_1",
  "PHQ_2",
  "PHQ_2_score",
  "Do you use a mobility aid (e.g., cane, walker, wheelchair, scooter)?",
  "Have you had any falls in the last two years?",
  "What happened as a result of your most serious fall?",
  "How many different types of medication do you take regularly?",
  "How often do you take a prescription opioid medication?",
  "I take too many medications",
  "I am comfortable with the amount of medications I take",
  "I would like to decrease the overall number of medications I take",
  "All my medications have an important purpose for my health",
  "What is your usual consumption of caffeine (e.g., coffee, tea, pop)?",
  "Do you use any nicotine products?",
  "What nicotine products do you use?",
  "How often do you use these products?",
  "WOMEN - How often do you drink alcohol? One standard drink of alcohol is equal to: Beer/Cider/Cooler: 341 ml (12 oz.) of 5% alcohol Wine: 142 ml (5 oz.) of 12% alcohol Spirits (rye, gin, rum, etc.): 43 ml (1.5 oz.) of 40% alcohol",
  "MEN - How often do you drink alcohol? One standard drink of alcohol is equal to: Beer/Cider/Cooler: 341 ml (12 oz.) of 5% alcohol Wine: 142 ml (5 oz.) of 12% alcohol Spirits (rye, gin, rum, etc.): 43 ml (1.5 oz.) of 40% alcohol",
  "How often do you use cannabis products (of any kind)?",
  "What do you use cannabis for? Select all that apply",
  "Complete?",
  "Which of the listed prescription sleeping pills have you taken 'regularly' in the past two (2) years?",
  "How often are you currently taking them?",
  "ALPRAZOLAM days/week",
  "ALPRAZOLAM usual total dose",
  "'Other': ALPRAZOLAM usual daily dose in mg",
  "BROMAZEPAM days/week",
  "BROMAZEPAM usual total dose",
  "'Other': BROMAZEPAM usual daily dose in mg",
  "CHLORDIAZEPOXIDE days/week",
  "CHLORDIAZEPOXIDE usual total dose",
  "'Other': CHLORDIAZEPOXIDE usual daily dose in mg",
  "CLONAZEPAM days/week",
  "CLONAZEPAM usual total dose",
  "'Other':  CLONAZEPAM usual daily dose in mg",
  "DIAZEPAM days/week",
  "DIAZEPAM usual total dose",
  "'Other':  DIAZEPAM usual daily dose in mg",
  "ESZOPICLONE days/week",
  "ESZOPICLONE usual total dose",
  "'Other':  ESZOPICLONE usual daily dose in mg",
  "FLURAZEPAM days/week",
  "FLURAZEPAM usual total dose",
  "'Other':  FLURAZEPAM usual daily dose in mg",
  "LORAZEPAM days/week",
  "LORAZEPAM usual total dose",
  "'Other':  LORAZEPAM usual daily dose in mg",
  "NITRAZEPAM days/week",
  "NITRAZEPAM usual total dose",
  "'Other':  NITRAZEPAM usual daily dose in mg",
  "OXAZEPAM days/week",
  "OXAZEPAM usual total dose",
  "'Other':  OXAZEPAM usual daily dose in mg",
  "TEMAZEPAM days/week",
  "TEMAZEPAM usual total dose",
  "'Other':  TEMAZEPAM usual daily dose in mg",
  "TRIAZOLAM days/week",
  "TRIAZOLAM usual total dose",
  "'Other':  TRIAZOLAM usual daily dose in mg",
  "ZOLPIDEM days/week",
  "ZOLPIDEM usual total dose",
  "'Other':  ZOLPIDEM usual daily dose in mg",
  "ZOPICLONE days/week",
  "ZOPICLONE usual total dose",
  "'Other':  ZOPICLONE usual daily dose in mg.",
  "PAST - ALPRAZOLAM days/week",
  "PAST - ALPRAZOLAM usual total dose",
  "PAST - 'Other': ALPRAZOLAM usual daily dose in mg",
  "PAST - BROMAZEPAM days/week",
  "PAST - BROMAZEPAM usual total dose",
  "PAST - 'Other': BROMAZEPAM usual daily dose in mg",
  "PAST - CHLORDIAZEPOXIDE days/week",
  "PAST - CHLORDIAZEPOXIDE usual total dose",
  "PAST - 'Other': CHLORDIAZEPOXIDE usual daily dose in mg",
  "PAST - CLONAZEPAM days/week",
  "PAST - CLONAZEPAM usual total dose",
  "PAST - 'Other':  CLONAZEPAM usual daily dose in mg",
  "PAST - DIAZEPAM days/week",
  "PAST - DIAZEPAM usual total dose",
  "PAST - 'Other':  DIAZEPAM usual daily dose in mg",
  "PAST - ESZOPICLONE days/week",
  "PAST - ESZOPICLONE usual total dose",
  "PAST - 'Other':  ESZOPICLONE usual daily dose in mg",
  "PAST - FLURAZEPAM days/week",
  "PAST - FLURAZEPAM usual total dose",
  "PAST - 'Other':  FLURAZEPAM usual daily dose in mg",
  "PAST - LORAZEPAM days/week",
  "PAST - LORAZEPAM usual total dose",
  "PAST - 'Other':  LORAZEPAM usual daily dose in mg",
  "PAST - NITRAZEPAM days/week",
  "PAST - NITRAZEPAM usual total dose",
  "PAST - 'Other':  NITRAZEPAM usual daily dose in mg",
  "PAST - OXAZEPAM days/week",
  "PAST - OXAZEPAM usual total dose",
  "PAST - 'Other':  OXAZEPAM usual daily dose in mg",
  "PAST - TEMAZEPAM days/week",
  "PAST - TEMAZEPAM usual total dose",
  "PAST - 'Other':  TEMAZEPAM usual daily dose in mg",
  "PAST - TRIAZOLAM days/week",
  "PAST - TRIAZOLAM usual total dose",
  "PAST - 'Other':  TRIAZOLAM usual daily dose in mg",
  "PAST - ZOLPIDEM days/week",
  "PAST - ZOLPIDEM usual total dose",
  "PAST - 'Other':  ZOLPIDEM usual daily dose in mg",
  "PAST - ZOPICLONE days/week",
  "PAST - ZOPICLONE usual total dose",
  "PAST - 'Other':  ZOPICLONE usual daily dose in mg.",
  "Estimate how many years you have taken medications to help you sleep. If you have taken more than one type of sleeping pill you can add up the total time for your estimate.",
  "How did you attempt to stop taking the sleep medication?",
  "How did you stop taking the sleep medication?",
  "ATTEMPT - Did you do any of the following when reducing your dose? Select all that apply. Splitting tablets (for example into 2 or 4 pieces) can be used to help you gradually reduce your dose over time. Some pharmacies can make a liquid formulation for the same purpose.",
  "STOPPED - Did you do any of the following when reducing your dose? Select all that apply. Splitting tablets (for example into 2 or 4 pieces) can be used to help you gradually reduce your dose over time. Some pharmacies can make a liquid formulation for the same purpose.",
  "What was the longest period of time that you completely stopped taking your sleep medication (within the past 2 years)?",
  ">1/MONTH - Which of the following 'withdrawal effects' did you experience when reducing the dose or fully stopping your sleep medication? Select all that apply: Insomnia: poor sleep or worsening sleep problems; Anxiety: feeling anxious, irritable, agitated, jittery, on edge, tense, worried, restless, racing thoughts; Other mental health effects: difficulty concentrating, depressed mood, memory problems, confusion; Physical effects: nausea, dizzy, unsteady, headaches, sweating, tremulous, shaky, pounding heart, sensitive to noise or light.",
  "0 or <1/MONTH - Which of the following 'withdrawal effects' did you experience when reducing the dose or fully stopping your sleep medication? Select all that apply: Insomnia: poor sleep or worsening sleep problems; Anxiety: feeling anxious, irritable, agitated, jittery, on edge, tense, worried, restless, racing thoughts; Other mental health effects: difficulty concentrating, depressed mood, memory problems, confusion; Physical effects: nausea, dizzy, unsteady, headaches, sweating, tremulous, shaky, pounding heart, sensitive to noise or light.",
  ">1/MONTH - Were any of the following methods used when decreasing or stopping your sleeping pills? Select all that apply.",
  "0 or <1/MONTH - Were any of the following methods used when decreasing or stopping your sleeping pills? Select all that apply.",
  "Do you intend to completely stop using sleeping pills within the next year?",
  "Complete?",
  "Do you use any other medications or substances to help you sleep? Select all that apply",
  "How often do you use alcohol to help you sleep?",
  "How often do you use cannabis to help you sleep?",
  "How often do you use melatonin to help you sleep?",
  "How often do you use opioids to help you sleep?",
  "How often do you use quetiapine to help you sleep?",
  "How often do you use trazodone to help you sleep?",
  "How often do you use sedating antihistamines to help you sleep? (e.g. Benadryl, Gravol, Sleepeze, etc.)",
  "How often do you use [other_sub_use] to help you sleep?",
  "Continue with survey? Thank you for your responses so far. You have completed 4 of 10 sections. Would you like to continue with the survey now or save your responses and come back later?",
  "Complete?",
  "Taking my sleeping pills is important for my overall health and wellness.",
  "I rely on sleeping pills to give me a good night's sleep.",
  "I rely on my sleeping pills to get enough sleep.",
  "Taking sleeping pills is the best way to fix my sleep problem.",
  "I feel better when I take my sleeping pills after not taking them for a night or two.",
  "I feel drowsy the morning after taking my sleeping pills.",
  "My sleeping pills make me feel unsteady on my feet.",
  "Stopped - I have fallen because of my sleeping pills.",
  "Taking sleeping pills is bad for my memory.",
  "Taking sleeping pills makes me an unsafe driver the next day.",
  "I feel that my sleeping pills are perfectly safe for me to use.",
  "I sometimes take more of my sleeping pills than prescribed.",
  "I limit how much alcohol I drink because I take sleeping pills.",
  "Taking sleeping pills interferes with my daytime activities (e.g. chores, errands, hobbies, work).",
  "Taking sleeping pills negatively impacts my social life.",
  "I feel like I am dependent on my sleeping pills.",
  "I worry about running out of my sleeping pills.",
  "I feel bad physically when I reduce the dose or don't take my sleeping pills.",
  "It is discouraging when I try to stop using my sleeping pills but can't.",
  "I feel like a failure when I try to stop my sleeping pills but can't.",
  "I regret that I ever started taking sleeping pills.",
  "I want to stop my sleeping pills.",
  "My prescriber wants me to stop my sleeping pills.",
  "My pharmacist wants me to stop my sleeping pills.",
  "I am capable of stopping my sleeping pills.",
  "I need help to stop my sleeping pills.",
  "My family and/or friends worry about my sleeping pill use.",
  "My family and/or friends have encouraged me to stop taking sleeping pills.",
  "I'm ashamed that I take sleeping pills.",
  "My prescriber thinks using sleeping pills is good for my health.",
  "My prescriber and I regularly review my sleeping pill use.",
  "My pharmacist thinks using sleeping pills is good for my health.",
  "My pharmacist and I regularly review my sleeping pill use.",
  "Taking my sleeping pills was important for my overall health and wellness.",
  "I relied on my sleeping pills to give me a good night's sleep.",
  "I relied on my sleeping pills to get enough sleep.",
  "Taking sleeping pills was the best way to fix my sleep problem.",
  "I felt better when I took my sleeping pills after not taking them for a night or two.",
  "I felt drowsy the morning after taking my sleeping pills.",
  "My sleeping pills made me feel unsteady on my feet.",
  "Would - I have fallen because of my sleeping pills.",
  "Taking sleeping pills was bad for my memory.",
  "Taking sleeping pills made me an unsafe driver the next day.",
  "I felt that my sleeping pills were perfectly safe for me to use.",
  "I sometimes took more of my sleeping pills than prescribed.",
  "I limited how much alcohol I drank because I took sleeping pills.",
  "Taking sleeping pills interfered with my daytime activities (e.g. chores, errands, hobbies, work).",
  "Taking sleeping pills negatively impacted my social life.",
  "I felt like I was dependent on my sleeping pills.",
  "I worried about running out of my sleeping pills.",
  "I felt bad physically when I reduced the dose or didn't take my sleeping pills.",
  "It was discouraging when I tried to stop using my sleeping pills but couldn't.",
  "I felt like a failure when I tried to stop my sleeping pills but couldn't.",
  "I regretted that I ever started taking sleeping pills.",
  "I wanted to stop my sleeping pills.",
  "My prescriber wanted me to stop my sleeping pills.",
  "My pharmacist wanted me to stop my sleeping pills.",
  "I was capable of stopping my sleeping pills.",
  "I needed help to stop my sleeping pills.",
  "My family and/or friends worried about my sleeping pill use.",
  "My family and/or friends encouraged me to stop taking sleeping pills.",
  "I was ashamed that I took sleeping pills.",
  "My prescriber thought using sleeping pills was good for my health.",
  "My prescriber and I regularly reviewed my sleeping pill use.",
  "My pharmacist thought using sleeping pills was good for my health.",
  "My pharmacist and I regularly reviewed my sleeping pill use.",
  "Continue with survey? We really appreciate your participation and responses so far and understand that this is a very long survey. You just completed the longest section. The remaining survey sections are not nearly as long. Would you like to continue with the survey now or save your responses and come back later?",
  "Complete?",
  "Stopped - I experienced memory problems.",
  "Stopped - I had trouble thinking clearly.",
  "Stopped - They interfered with my daytime activities (e.g. chores, errands, hobbies, work).",
  "Stopped - They interfered with my ability to socialize.",
  "Stopped - They made me a less safe driver.",
  "Stopped - I had balance problems.",
  "Stopped - I had one or more falls.",
  "Stopped - I didn't have a sleep problem anymore.",
  "Stopped - They weren't working for me anymore.",
  "Stopped - I found a different and better way to help my sleep problem.",
  "Stopped - People close to me (e.g. family, friends) said they were concerned about me taking them.",
  "Stopped - My prescriber wanted me to stop taking them.",
  "Stopped - My pharmacist wanted me to stop taking them.",
  "Stopped - They caused problems with my other medications.",
  "Stopped - I developed a dependence problem with them.",
  "Stopped - I learned a safe and effective way to stop them.",
  "Stopped - They cost too much.",
  "Would - I experienced memory problems.",
  "Would - I had trouble thinking clearly.",
  "Would - They interfered with my daytime activities (e.g. chores, errands, hobbies, work).",
  "Would - They interfered with my ability to socialize.",
  "Would - They made me a less safe driver.",
  "Would - I had balance problems.",
  "Would - I had one or more falls.",
  "Would - I didn't have a sleep problem anymore.",
  "Would - They weren't working for me anymore.",
  "Would - I found a different and better way to help my sleep problem.",
  "Would - People close to me (e.g. family, friends) said they were concerned about me taking them.",
  "Would - My prescriber wanted me to stop taking them.",
  "Would - My pharmacist wanted me to stop taking them.",
  "Would - They caused problems with my other medications.",
  "Would - I developed a dependence problem with them.",
  "Would - I learned a safe and effective way to stop them.",
  "Would - They cost too much.",
  "Complete?",
  "I need 8 hours of sleep to feel refreshed and function well during the day.",
  "When I don't get the proper amount of sleep on a given night, I need to catch up the next day by napping or on the next night by sleeping longer.",
  "I am concerned that chronic insomnia may have serious consequences on my physical health.",
  "I am worried that I may lose control over my abilities to sleep.",
  "After a poor night's sleep, I know that it will interfere with my daily activities the next day.",
  "In order to be alert and function well during the day, I believe I would be better off taking a sleeping pill rather than having a poor night's sleep.",
  "When I feel irritable, depressed, or anxious during the day, it is mostly because I did not sleep well the night before.",
  "When I sleep poorly on one night, I know it will disturb my sleep schedule for the whole week.",
  "Without an adequate night's sleep, I can hardly function the next day.",
  "I can't ever predict whether I'll have a good or poor night's sleep.",
  "I have little ability to manage the negative consequences of disturbed sleep.",
  "When I feel tired, have no energy, or just seem not to function well during the day, it is generally because I did not sleep well the night before.",
  "I believe insomnia is essentially the result of a chemical imbalance.",
  "I feel insomnia is ruining my ability to enjoy life and prevents me from doing what I want.",
  "Medication is probably the only solution to sleeplessness.",
  "I avoid or cancel obligations (social, family) after a poor night's sleep.",
  "DBAS-16 score",
  "Complete?",
  "I see myself as someone who IS RESERVED.",
  "I see myself as someone who IS GENERALLY TRUSTING.",
  "I see myself as someone who TENDS TO BE LAZY.",
  "I see myself as someone who IS RELAXED, HANDLES STRESS WELL.",
  "I see myself as someone who HAS FEW ARTISTIC INTERESTS.",
  "I see myself as someone who IS OUTGOING, SOCIABLE.",
  "I see myself as someone who TENDS TO FIND FAULT WITH OTHERS.",
  "I see myself as someone who DOES A THOROUGH JOB.",
  "I see myself as someone who GETS NERVOUS EASILY.",
  "I see myself as someone who HAS AN ACTIVE IMAGINATION.",
  "Complete?",
  "I am content.",
  "I often don't think things through before I speak.",
  "I would like to skydive.",
  "I am happy.",
  "I often involve myself in situations that I later regret being involved in.",
  "I enjoy new and exciting experiences even if they are unconventional.",
  "I have faith that my future holds great promise.",
  "It's frightening to feel dizzy or faint.",
  "I like doing things that frighten me a little.",
  "It frightens me when I feel my heart beat change.",
  "I usually act without stopping to think.",
  "I would like to learn how to drive a motorcycle.",
  "I feel proud of my accomplishments.",
  "I get scared when I'm too nervous.",
  "Generally, I am an impulsive person.",
  "I am interested in experience for its own sake even if it is illegal.",
  "I feel that I'm a failure.",
  "I get scared when I experience unusual body sensations.",
  "I would enjoy hiking long distances in wild and uninhabited territory.",
  "I feel pleasant.",
  "It scares me when I'm unable to focus on a task.",
  "I feel I have to be manipulative to get what I want.",
  "I am very enthusiastic about my future.",
  "Complete?",
  "Take some time off and get away from the situation.",
  "Focus on the problem and see how I can solve it.",
  "Blame myself for having gotten into this situation.",
  "Treat myself to a favorite food or snack.",
  "Feel anxious about not being able to cope.",
  "Think about how I solved similar problems.",
  "Visit a friend.",
  "Determine a course of action and follow it.",
  "Buy myself something.",
  "Blame myself for being too emotional about the situation.",
  "Work to understand the situation.",
  "Become very upset.",
  "Take corrective action immediately.",
  "Blame myself for not knowing what to do.",
  "Spend time with a special person.",
  "Think about the event and learn from my mistakes.",
  "Wish that I could change what had happened or how I felt.",
  "Go out for a snack or meal.",
  "Analyze my problem before reacting.",
  "Focus on my general inadequacies.",
  "Phone a friend.",
  "Complete?"
)
```

```{r}
#|label: Removing the row with Question on it
# Here is the code I will use to remove the first row of the data because it 
# is simply repeating the questions from the row above.

SIMOA <- SIMOA[-1, ]

```

```{r}
#| label: Removing Columns w/out data
## Here is the code I will use to remove the columns that do not hold any data 
## that is important such as the consent time stamp and the "Complete?" columns 
## as they do not provide information and simply take up space making the 
## process of going through all the data more complex

SIMOA <- SIMOA[, !colnames(SIMOA) %in% 
                 c("Complete?", "Consent timestamp", "Survey Completion", "Survey start timestamp", 
                   "Continue with survey? Thank you for your responses so far. You have completed 4 of 10 sections. Would you like to continue with the survey now or save your responses and come back later?",
                   "Continue with survey? We really appreciate your participation and responses so far and understand that this is a very long survey. You just completed the longest section. The remaining survey sections are not nearly as long. Would you like to continue with the survey now or save your responses and come back later?")]

```

## AR Demographic Data (ALL RESPONDENTS)

Below I will include all the code I used to calculate the demographic data for all participants who have indicated they are ≥65 years old either from the yes/no question or if they have indicated a numerical value for their age. Furthermore, the participant data will only be included if they were able to identify which BZRA they use(d). This will ensure that the people included in the analyses were really using BZRAs rather than other medications which can have an impact on sleep such as antihistamines, melatonin, or others.

```{r}
#|label: mean/sd and N for age (All Respondents)

# Ensure the age column is numeric (to avoid issues with non-numeric values)
SIMOA$`What is your age?` <- as.numeric(SIMOA$`What is your age?`)

# Filter the dataset based on the given conditions
# The object 'AR_demo' contains all people that meet our new inclusion criteria. Keep calling this object rather than doing the filter calculations everytime.
AR_demo <- SIMOA %>%
  filter(
    # Include if age is provided and ≥ 65
    (`What is your age?` >= 65 & !is.na(`What is your age?`)) | 
    # OR if they answered "Yes" to being 65+
    (`Are you 65 or older?` == "Yes"),
    # AND they answered the sleeping pill question
    !is.na(`Which of the listed prescription sleeping pills have you taken 'regularly' in the past two (2) years?`)
  )

# Calculate mean and standard deviation of age (only for those who provided an age)
AR_mean_age <- mean(AR_demo$`What is your age?`, na.rm = TRUE)
AR_sd_age <- sd(AR_demo$`What is your age?`, na.rm = TRUE)

# Count the number of included participants
AR_n_people <- nrow(AR_demo)

# Output the results
list(
  AR_mean_age = AR_mean_age,
  AR_sd_age = AR_sd_age,
  AR_n_people = AR_n_people
)

```

```{r}
#| label: Sex Stats (All Respondents)

# Ensure age is numeric
SIMOA$`What is your age?` <- as.numeric(SIMOA$`What is your age?`)

# Count number of males and females
AR_sex_breakdown <- AR_demo %>%
  group_by(`What is your sex?`) %>%
  summarise(n = n(), .groups = "drop")

# Extract values safely
AR_n_female <- AR_sex_breakdown$n[AR_sex_breakdown$`What is your sex?` == "Female"]
AR_n_male <- AR_sex_breakdown$n[AR_sex_breakdown$`What is your sex?` == "Male"]

# Handle missing values
AR_n_female <- ifelse(length(AR_n_female) == 0, 0, AR_n_female)
AR_n_male <- ifelse(length(AR_n_male) == 0, 0, AR_n_male)

# Calculate % Female
AR_percent_female <- ifelse((AR_n_female + AR_n_male) > 0, (AR_n_female / (AR_n_female + AR_n_male)) * 100, NA)

# Output results
list(
  AR_n_female = AR_n_female,
  AR_n_male = AR_n_male,
  AR_percent_female = AR_percent_female
)
```

```{r}
#|label: Gender Stats (All Respondents)

# Ensure age is numeric
SIMOA$`What is your age?` <- as.numeric(SIMOA$`What is your age?`)

# Count number of each gender identity
AR_gender_breakdown <- AR_demo %>%
  group_by(`What is your gender identity?`) %>%
  summarise(n = n(), .groups = "drop")

# Extract values safely
AR_n_woman <- AR_gender_breakdown$n[AR_gender_breakdown$`What is your gender identity?` == "Woman"]
AR_n_man <- AR_gender_breakdown$n[AR_gender_breakdown$`What is your gender identity?` == "Man"]
AR_n_nonbinary <- AR_gender_breakdown$n[AR_gender_breakdown$`What is your gender identity?` == "Non-binary"]

# Handle missing values
AR_n_woman <- ifelse(length(AR_n_woman) == 0, 0, AR_n_woman)
AR_n_man <- ifelse(length(AR_n_man) == 0, 0, AR_n_man)
AR_n_nonbinary <- ifelse(length(AR_n_nonbinary) == 0, 0, AR_n_nonbinary)

# Calculate % Woman
AR_percent_woman <- ifelse((AR_n_woman + AR_n_man + AR_n_nonbinary) > 0, 
                        (AR_n_woman / (AR_n_woman + AR_n_man + AR_n_nonbinary)) * 100, NA)

# Output results
list(
  AR_n_woman = AR_n_woman,
  AR_n_man = AR_n_man,
  AR_n_nonbinary = AR_n_nonbinary,
  AR_percent_woman = AR_percent_woman
)

```

```{r}
#|label: Province of Residence (All Respondents)
# This is the code used to determine the number of responses each province received from the elegible participants.

AR_province_counts <- AR_demo %>%
  group_by(`Select the province or territory in which you currently live.`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(AR_province_counts)

```

```{r}
#|label: Highest Education Completed (All Respondents)
# This is the code used to determine the number of responses of each educational level completed from the elegible participants. 

AR_complete_education <- AR_demo %>%
  group_by(`What is the highest level of education you completed?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(AR_complete_education)

```

```{r}
#|label: Employment Status (All Respondents)
# This is the code used to determine the number of responses of each educational level completed from the elegible participants. 

AR_employment <- AR_demo %>%
  group_by(`What is your employment status?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(AR_employment)

```

```{r}
#|label: Driving Frequency (All Respondents)
# This is the code used to determine the number of responses of how often they drive completed from the elegible participants. 
AR_drive_freq <- AR_demo %>%
  group_by(`How often do you drive?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(AR_drive_freq)

```

```{r}
#|label: Household Income (All Respondents)
# This is the code used to determine the number of responses for their level of household income completed from the elegible participants. 

AR_household_income <- AR_demo %>%
  group_by(`Which category matches your annual household income?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(AR_household_income)

```

```{r}
#|label: People They Live With (All Respondents)
# This is the code used to determine the number of responses of who they currently live with completed from the elegible participants. 

AR_live_with <- AR_demo %>%
  group_by(`With whom do you currently live? Select all that apply.`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(AR_live_with)

```

```{r}
#|label: OSSS-3 Total Score with Qualitative Markers
# This code calculates the count of each OSSS-3 score and assigns qualitative markers.

AR_OSSS_3_score <- AR_demo %>%
  # Ensure OSSS-3_score is numeric
  mutate(`OSSS-3_score` = as.numeric(`OSSS-3_score`)) %>%
  group_by(`OSSS-3_score`) %>%
  summarise(count = n(), .groups = "drop") %>%
  mutate(
    support_level = case_when(
      `OSSS-3_score` >= 3 & `OSSS-3_score` <= 8 ~ "Poor Support",
      `OSSS-3_score` >= 9 & `OSSS-3_score` <= 11 ~ "Moderate Support",
      `OSSS-3_score` >= 12 & `OSSS-3_score` <= 14 ~ "Strong Support",
      TRUE ~ "Other"  # This will capture any score outside the defined ranges
    )
  )

# View the result
print(AR_OSSS_3_score)

```

## STOPPED Demographic Data (STOPPED)

```{r}
#| label: Creating New Object for Those Who Stopped
# The object 'STOPPED_demo' contains all people that meet our new inclusion criteria. Keep calling this object rather than doing the filter calculations everytime.

STOPPED_demo <- SIMOA %>%
  filter(
    # Age conditions
    (`What is your age?` >= 65 & !is.na(`What is your age?`)) | 
    (`Are you 65 or older?` == "Yes"),
    # Sleeping pill question condition
    !is.na(`Which of the listed prescription sleeping pills have you taken 'regularly' in the past two (2) years?`),
    # New condition for 'Stopped taking these medications? Yes or No'
    `Stopped taking these medications? Yes or No` == "Yes"
  )

```

```{r}
#| label: M/sd/N for age (STOPPED)

# Calculate mean and standard deviation of age (only for those who provided an age)
STOPPED_mean_age <- mean(STOPPED_demo$`What is your age?`, na.rm = TRUE)
STOPPED_sd_age <- sd(STOPPED_demo$`What is your age?`, na.rm = TRUE)

# Count the number of included participants
STOPPED_n_people <- nrow(STOPPED_demo)

# Output the results
list(
  STOPPED_mean_age = STOPPED_mean_age,
  STOPPED_sd_age = STOPPED_sd_age,
  STOPPED_n_people = STOPPED_n_people
)

```

```{r}
#| label: Sex Stats (STOPPED)

# Count number of males and females
STOPPED_sex_breakdown <- STOPPED_demo %>%
  group_by(`What is your sex?`) %>%
  summarise(n = n(), .groups = "drop")

# Extract values safely
STOPPED_n_female <- STOPPED_sex_breakdown$n[STOPPED_sex_breakdown$`What is your sex?` == "Female"]
STOPPED_n_male <- STOPPED_sex_breakdown$n[STOPPED_sex_breakdown$`What is your sex?` == "Male"]

# Handle missing values
STOPPED_n_female <- ifelse(length(STOPPED_n_female) == 0, 0, STOPPED_n_female)
STOPPED_n_male <- ifelse(length(STOPPED_n_male) == 0, 0, STOPPED_n_male)

# Calculate % Female
STOPPED_percent_female <- ifelse((STOPPED_n_female + STOPPED_n_male) > 0, (STOPPED_n_female / (STOPPED_n_female + STOPPED_n_male)) * 100, NA)

# Output results
list(
  STOPPED_n_female = STOPPED_n_female,
  STOPPED_n_male = STOPPED_n_male,
  STOPPED_percent_female = STOPPED_percent_female
)

```

```{r}
#| label: Gender Stats (STOPPED)
# Count number of each gender identity, treating NA as "Not Specified"
STOPPED_gender_breakdown <- STOPPED_demo %>%
  mutate(
    `What is your gender identity?` = case_when(
      is.na(`What is your gender identity?`) ~ "Not Specified",  # Treat NA as "Not Specified"
      TRUE ~ `What is your gender identity?`  # Keep other values as is
    )
  ) %>%
  group_by(`What is your gender identity?`) %>%
  summarise(n = n(), .groups = "drop")

# Check the summary of gender identities (to look for any unexpected values)
print(STOPPED_gender_breakdown)

# Extract values safely
STOPPED_n_woman <- STOPPED_gender_breakdown$n[STOPPED_gender_breakdown$`What is your gender identity?` == "Woman"]
STOPPED_n_man <- STOPPED_gender_breakdown$n[STOPPED_gender_breakdown$`What is your gender identity?` == "Man"]
STOPPED_n_nonbinary <- STOPPED_gender_breakdown$n[STOPPED_gender_breakdown$`What is your gender identity?` == "Non-binary"]
STOPPED_n_not_specified <- STOPPED_gender_breakdown$n[STOPPED_gender_breakdown$`What is your gender identity?` == "Not Specified"]

# Handle missing values
STOPPED_n_woman <- ifelse(length(STOPPED_n_woman) == 0, 0, STOPPED_n_woman)
STOPPED_n_man <- ifelse(length(STOPPED_n_man) == 0, 0, STOPPED_n_man)
STOPPED_n_nonbinary <- ifelse(length(STOPPED_n_nonbinary) == 0, 0, STOPPED_n_nonbinary)
STOPPED_n_not_specified <- ifelse(length(STOPPED_n_not_specified) == 0, 0, STOPPED_n_not_specified)

# Calculate total
STOPPED_total <- STOPPED_n_woman + STOPPED_n_man + STOPPED_n_nonbinary + STOPPED_n_not_specified

# Calculate percentage of women in the sample
STOPPED_percent_woman <- ifelse(STOPPED_total > 0, (STOPPED_n_woman / STOPPED_total) * 100, NA)

# Output results
list(
  STOPPED_n_woman = STOPPED_n_woman,
  STOPPED_n_man = STOPPED_n_man,
  STOPPED_n_nonbinary = STOPPED_n_nonbinary,
  STOPPED_n_not_specified = STOPPED_n_not_specified,
  STOPPED_percent_woman = STOPPED_percent_woman,
  STOPPED_total = STOPPED_total
)

```

```{r}
#|label: Province of Residence (STOPPED)
# This is the code used to determine the number of responses each province received from the elegible participants who stopped taking BZRAs.

STOPPED_province_counts <- STOPPED_demo %>%
  group_by(`Select the province or territory in which you currently live.`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(STOPPED_province_counts)

```

```{r}
#|label: Highest Education Completed (STOPPED)
# This is the code used to determine the number of responses of each educational level completed from the elegible participants. 

STOPPED_complete_education <- STOPPED_demo %>%
  group_by(`What is the highest level of education you completed?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(STOPPED_complete_education)

```

```{r}
#|label: Employment Status (STOPPED)
# This is the code used to determine the number of responses of each educational level completed from the elegible participants. 

STOPPED_employment <- STOPPED_demo %>%
  group_by(`What is your employment status?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(STOPPED_employment)

```

```{r}
#|label: Driving Frequency (STOPPED)
# This is the code used to determine the number of responses of how often they drive completed from the elegible participants. 
STOPPED_drive_freq <- STOPPED_demo %>%
  group_by(`How often do you drive?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(STOPPED_drive_freq)

```

```{r}
#|label: Household Income (STOPPED)
# This is the code used to determine the number of responses for their level of household income completed from the elegible participants. 

STOPPED_household_income <- STOPPED_demo %>%
  group_by(`Which category matches your annual household income?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(STOPPED_household_income)

```

```{r}
#|label: People They Live With (STOPPED)
# This is the code used to determine the number of responses of who they currently live with completed from the elegible participants. 

STOPPED_live_with <- STOPPED_demo %>%
  group_by(`With whom do you currently live? Select all that apply.`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(STOPPED_live_with)

```

```{r}
#|label: OSSS-3 Total Score with Qualitative Markers (STOPPED)
# This code calculates the count of each OSSS-3 score and assigns qualitative markers.

STOPPED_OSSS_3_score <- STOPPED_demo %>%
  # Ensure OSSS-3_score is numeric
  mutate(`OSSS-3_score` = as.numeric(`OSSS-3_score`)) %>%
  group_by(`OSSS-3_score`) %>%
  summarise(count = n(), .groups = "drop") %>%
  mutate(
    support_level = case_when(
      `OSSS-3_score` >= 3 & `OSSS-3_score` <= 8 ~ "Poor Support",
      `OSSS-3_score` >= 9 & `OSSS-3_score` <= 11 ~ "Moderate Support",
      `OSSS-3_score` >= 12 & `OSSS-3_score` <= 14 ~ "Strong Support",
      TRUE ~ "Other"  # This will capture any score outside the defined ranges
    )
  )

# View the result
print(STOPPED_OSSS_3_score)

```

```{r}
#| label: PHQ-2 Total Score with Qualitative Markers (STOPPED)

STOPPED_PHQ_2_score <- STOPPED_demo %>%
  # Ensure PHQ_2_score is numeric
  mutate(`PHQ_2_score` = as.numeric(`PHQ_2_score`)) %>%
  group_by(`PHQ_2_score`) %>%
  summarise(count = n(), .groups = "drop") %>%
  mutate(
    depression_level = case_when(
      `PHQ_2_score` >= 3 ~ "High Depressive Symptoms",
      `PHQ_2_score` >= 0 & `PHQ_2_score` <= 2 ~ "No/Mild Depressive Symptoms",
      TRUE ~ "Other"  # Captures unexpected values if any
    )
  )

# View the result
print(STOPPED_PHQ_2_score)

```

## USING Demographic Data (USING)

```{r}
#| label: Creating New Object for Those Who Still Use
# The object 'STOPPED_demo' contains all people that meet our new inclusion criteria. Keep calling this object rather than doing the filter calculations everytime.

USING_demo <- SIMOA %>%
  filter(
    # Age conditions
    (`What is your age?` >= 65 & !is.na(`What is your age?`)) | 
    (`Are you 65 or older?` == "Yes"),
    # Sleeping pill question condition
    !is.na(`Which of the listed prescription sleeping pills have you taken 'regularly' in the past two (2) years?`),
    # New condition for 'Stopped taking these medications? Yes or No'
    `Stopped taking these medications? Yes or No` == "No"
  )

```

```{r}
#|label: mean/sd and N for age (USING)

# Ensure age is numeric
SIMOA$`What is your age?` <- as.numeric(SIMOA$`What is your age?`)

# Calculate mean and standard deviation of age (only for those who provided an age)
USING_mean_age <- mean(USING_demo$`What is your age?`, na.rm = TRUE)
USING_sd_age <- sd(USING_demo$`What is your age?`, na.rm = TRUE)

# Count the number of included participants
USING_n_people <- nrow(USING_demo)

# Output the results with the correct variable names
list(
  USING_mean_age = USING_mean_age,
  USING_sd_age = USING_sd_age,
  USING_n_people = USING_n_people
)

```

```{r}
#| label: Sex Stats (USING)

# Ensure age is numeric
SIMOA$`What is your age?` <- as.numeric(SIMOA$`What is your age?`)

# Count number of males and females
USING_sex_breakdown <- USING_demo %>%
  group_by(`What is your sex?`) %>%
  summarise(n = n(), .groups = "drop")

# Extract values safely
USING_n_female <- USING_sex_breakdown$n[USING_sex_breakdown$`What is your sex?` == "Female"]
USING_n_male <- USING_sex_breakdown$n[USING_sex_breakdown$`What is your sex?` == "Male"]

# Handle missing values
USING_n_female <- ifelse(length(USING_n_female) == 0, 0, USING_n_female)
USING_n_male <- ifelse(length(USING_n_male) == 0, 0, USING_n_male)

# Calculate % Female
USING_percent_female <- ifelse((USING_n_female + USING_n_male) > 0, (USING_n_female / (USING_n_female + USING_n_male)) * 100, NA)

# Output results
list(
  USING_n_female = USING_n_female,
  USING_n_male = USING_n_male,
  USING_percent_female = USING_percent_female
)
```

```{r}
#|label: Gender Stats (USING)

# Ensure age is numeric
SIMOA$`What is your age?` <- as.numeric(SIMOA$`What is your age?`)

# Count number of each gender identity
USING_gender_breakdown <- USING_demo %>%
  group_by(`What is your gender identity?`) %>%
  summarise(n = n(), .groups = "drop")

# Extract values safely
USING_n_woman <- USING_gender_breakdown$n[USING_gender_breakdown$`What is your gender identity?` == "Woman"]
USING_n_man <- USING_gender_breakdown$n[USING_gender_breakdown$`What is your gender identity?` == "Man"]
USING_n_nonbinary <- USING_gender_breakdown$n[USING_gender_breakdown$`What is your gender identity?` == "Non-binary"]

# Handle missing values
USING_n_woman <- ifelse(length(USING_n_woman) == 0, 0, USING_n_woman)
USING_n_man <- ifelse(length(USING_n_man) == 0, 0, USING_n_man)
USING_n_nonbinary <- ifelse(length(USING_n_nonbinary) == 0, 0, USING_n_nonbinary)

# Calculate % Woman
USING_percent_woman <- ifelse((USING_n_woman + USING_n_man + USING_n_nonbinary) > 0, 
                        (USING_n_woman / (USING_n_woman + USING_n_man + USING_n_nonbinary)) * 100, NA)

# Output results
list(
  USING_n_woman = USING_n_woman,
  USING_n_man = USING_n_man,
  USING_n_nonbinary = USING_n_nonbinary,
  USING_percent_woman = USING_percent_woman
)

```

```{r}
#|label: Province of Residence (USING)
# This is the code used to determine the number of responses each province received from the elegible participants.

USING_province_counts <- USING_demo %>%
  group_by(`Select the province or territory in which you currently live.`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(USING_province_counts)

```

```{r}
#|label: Highest Education Completed (USING)
# This is the code used to determine the number of responses of each educational level completed from the elegible participants. 

USING_complete_education <- USING_demo %>%
  group_by(`What is the highest level of education you completed?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(USING_complete_education)

```

```{r}
#|label: Employment Status (USING)
# This is the code used to determine the number of responses of each educational level completed from the elegible participants. 

USING_employment <- USING_demo %>%
  group_by(`What is your employment status?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(USING_employment)

```

```{r}
#|label: Driving Frequency (USING)
# This is the code used to determine the number of responses of how often they drive completed from the elegible participants. 
USING_drive_freq <- USING_demo %>%
  group_by(`How often do you drive?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(USING_drive_freq)

```

```{r}
#|label: Household Income (USING)
# This is the code used to determine the number of responses for their level of household income completed from the elegible participants. 

USING_household_income <- USING_demo %>%
  group_by(`Which category matches your annual household income?`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(USING_household_income)

```

```{r}
#|label: People They Live With (USING)
# This is the code used to determine the number of responses of who they currently live with completed from the elegible participants. 

USING_live_with <- USING_demo %>%
  group_by(`With whom do you currently live? Select all that apply.`) %>%
  summarise(count = n(), .groups = "drop")

# View the result
print(USING_live_with)

```

```{r}
#|label: OSSS-3 Total Score with Qualitative Markers (USING)
# This code calculates the count of each OSSS-3 score and assigns qualitative markers.

USING_OSSS_3_score <- USING_demo %>%
  # Ensure OSSS-3_score is numeric
  mutate(`OSSS-3_score` = as.numeric(`OSSS-3_score`)) %>%
  group_by(`OSSS-3_score`) %>%
  summarise(count = n(), .groups = "drop") %>%
  mutate(
    support_level = case_when(
      `OSSS-3_score` >= 3 & `OSSS-3_score` <= 8 ~ "Poor Support",
      `OSSS-3_score` >= 9 & `OSSS-3_score` <= 11 ~ "Moderate Support",
      `OSSS-3_score` >= 12 & `OSSS-3_score` <= 14 ~ "Strong Support",
      TRUE ~ "Other"  # This will capture any score outside the defined ranges
    )
  )

# View the result
print(USING_OSSS_3_score)

```

```{r}
#| label: PHQ-2 Total Score with Qualitative Markers (USING)

USING_PHQ_2_score <- USING_demo %>%
  # Ensure PHQ_2_score is numeric
  mutate(`PHQ_2_score` = as.numeric(`PHQ_2_score`)) %>%
  group_by(`PHQ_2_score`) %>%
  summarise(count = n(), .groups = "drop") %>%
  mutate(
    depression_level = case_when(
      `PHQ_2_score` >= 3 ~ "High Depressive Symptoms",
      `PHQ_2_score` >= 0 & `PHQ_2_score` <= 2 ~ "No/Mild Depressive Symptoms",
      TRUE ~ "Other"  # Captures unexpected values if any
    )
  )

# View the result
print(USING_PHQ_2_score)

```

## Independent Samples t-test for Demographics

Below I will include all the code I used to calculate the difference between the people who reported having stopped using BZRAs and those who did not. This will be used for Table 1 to see if the groups are different from each other which may limit the conclusions we are able to draw from the research and could impact the amount of power through all our analyses.

```{r}
#|label: Comparing Age

# Shapiro-Wilk normality test for Group 1 (STOPPED)
shapiro.test(STOPPED_demo$`What is your age?`)

# Shapiro-Wilk normality test for Group 2 (USING)
shapiro.test(USING_demo$`What is your age?`)

# Mann-Whitney U test (non-parametric)
wilcox.test(STOPPED_demo$`What is your age?`, USING_demo$`What is your age?`)


```

## AR Personality Calculations (ALL RESPONDENTS)

This is the code I will use to create columns for a total score for each subsection of each personality measure including the DBAS-16, BFI-10, SUPRS, and CISS-21. I will create a score for each measure according to their scoring requirements and I will use their qualitative headings when appropriate.

```{r}
#| label: Creating A new object for the personality measures (ALL RESPONDENTS)

AR_personality <- SIMOA %>%
  filter(
    # Include if age is provided and ≥ 65
    (`What is your age?` >= 65 & !is.na(`What is your age?`)) | 
    # OR if they answered "Yes" to being 65+
    (`Are you 65 or older?` == "Yes"),
    # AND they answered the sleeping pill question
    !is.na(`Which of the listed prescription sleeping pills have you taken 'regularly' in the past two (2) years?`)
  )

```

```{r}
#| label: DBAS-16 subscale scoring (ALL RESPONDENTS)

# Convert DBAS-16 responses to numeric values
AR_DBAS_16_subscales <- AR_personality %>%
  mutate(across(
    c(
      "I need 8 hours of sleep to feel refreshed and function well during the day.",
      "When I don't get the proper amount of sleep on a given night, I need to catch up the next day by napping or on the next night by sleeping longer."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Expectations_{.col}")) %>%
  
  mutate(across(
    c(
      "After a poor night's sleep, I know that it will interfere with my daily activities the next day.",
      "When I feel irritable, depressed, or anxious during the day, it is mostly because I did not sleep well the night before.",
      "Without an adequate night's sleep, I can hardly function the next day.",
      "When I feel tired, have no energy, or just seem not to function well during the day, it is generally because I did not sleep well the night before.",
      "I avoid or cancel obligations (social, family) after a poor night's sleep."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Consequences_{.col}")) %>%
  
  mutate(across(
    c(
      "I am concerned that chronic insomnia may have serious consequences on my physical health.",
      "I am worried that I may lose control over my abilities to sleep.",
      "When I sleep poorly on one night, I know it will disturb my sleep schedule for the whole week.",
      "I can't ever predict whether I'll have a good or poor night's sleep.",
      "I have little ability to manage the negative consequences of disturbed sleep.",
      "I feel insomnia is ruining my ability to enjoy life and prevents me from doing what I want."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Worry_Helplessness_{.col}")) %>%
  
  mutate(across(
    c(
      "In order to be alert and function well during the day, I believe I would be better off taking a sleeping pill rather than having a poor night's sleep.",
      "I believe insomnia is essentially the result of a chemical imbalance.",
      "Medication is probably the only solution to sleeplessness."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Medication_{.col}"))

# Calculate the subscale averages and standard deviations, ensuring valid responses for each question
AR_DBAS_16_avg_sd_n <- AR_DBAS_16_subscales %>%
  mutate(
    Expectations_N = rowSums(!is.na(select(., starts_with("Expectations_")))),
    Consequences_N = rowSums(!is.na(select(., starts_with("Consequences_")))),
    Worry_Helplessness_N = rowSums(!is.na(select(., starts_with("Worry_Helplessness_")))),
    Medication_N = rowSums(!is.na(select(., starts_with("Medication_"))))
  ) %>%
  
  # Only keep rows where all questions in the subscale have valid responses (N = number of complete responses)
  filter(
    Expectations_N == 2,  # 2 questions in the Expectations subscale
    Consequences_N == 5,  # 5 questions in the Consequences subscale
    Worry_Helplessness_N == 6,  # 6 questions in the Worry_Helplessness subscale
    Medication_N == 3  # 3 questions in the Medication subscale
  ) %>%
  
  summarise(
    Expectations_Avg = mean(c_across(starts_with("Expectations_")), na.rm = TRUE),
    Expectations_SD = sd(c_across(starts_with("Expectations_")), na.rm = TRUE),
    Expectations_N = n(),
    
    Consequences_Avg = mean(c_across(starts_with("Consequences_")), na.rm = TRUE),
    Consequences_SD = sd(c_across(starts_with("Consequences_")), na.rm = TRUE),
    Consequences_N = n(),
    
    Worry_Helplessness_Avg = mean(c_across(starts_with("Worry_Helplessness_")), na.rm = TRUE),
    Worry_Helplessness_SD = sd(c_across(starts_with("Worry_Helplessness_")), na.rm = TRUE),
    Worry_Helplessness_N = n(),
    
    Medication_Avg = mean(c_across(starts_with("Medication_")), na.rm = TRUE),
    Medication_SD = sd(c_across(starts_with("Medication_")), na.rm = TRUE),
    Medication_N = n()
  )

# View the result
print(AR_DBAS_16_avg_sd_n)

```

```{r}
#| label: BFI-10 subscale scoring (ALL RESPONDENTS)

# Convert BFI-10 responses to numeric values
AR_BFI_10_subscales <- AR_personality %>%
  mutate(across(
    c(
      "I see myself as someone who IS RESERVED.",
      "I see myself as someone who IS GENERALLY TRUSTING.",
      "I see myself as someone who TENDS TO BE LAZY.",
      "I see myself as someone who IS RELAXED, HANDLES STRESS WELL.",
      "I see myself as someone who HAS FEW ARTISTIC INTERESTS.",
      "I see myself as someone who IS OUTGOING, SOCIABLE.",
      "I see myself as someone who TENDS TO FIND FAULT WITH OTHERS.",
      "I see myself as someone who DOES A THOROUGH JOB.",
      "I see myself as someone who GETS NERVOUS EASILY.",
      "I see myself as someone who HAS AN ACTIVE IMAGINATION."
    ), 
    ~ case_when(
      . == "Disagree strongly" ~ 1,
      . == "Disagree a little" ~ 2,
      . == "Neither agree nor disagree" ~ 3,
      . == "Agree a little" ~ 4,
      . == "Agree strongly" ~ 5,
      TRUE ~ NA_real_  # In case of any other unexpected values
    ), .names = "{.col}_raw")) %>%
  
  # Reverse code the appropriate items (1, 7, 3, 4, and 5)
  mutate(
    `I see myself as someone who IS RESERVED._raw` = 6 - `I see myself as someone who IS RESERVED._raw`,
    `I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw` = 6 - `I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw`,
    `I see myself as someone who TENDS TO BE LAZY._raw` = 6 - `I see myself as someone who TENDS TO BE LAZY._raw`,
    `I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw` = 6 - `I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw`,
    `I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw` = 6 - `I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw`
  ) %>%
  
  # Handle missing data (NA) by removing rows with NA values in the relevant columns
  filter(
    !is.na(`I see myself as someone who IS RESERVED._raw`) & 
    !is.na(`I see myself as someone who IS OUTGOING, SOCIABLE._raw`) &
    !is.na(`I see myself as someone who IS GENERALLY TRUSTING._raw`) &
    !is.na(`I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw`) &
    !is.na(`I see myself as someone who TENDS TO BE LAZY._raw`) &
    !is.na(`I see myself as someone who DOES A THOROUGH JOB._raw`) &
    !is.na(`I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw`) &
    !is.na(`I see myself as someone who GETS NERVOUS EASILY._raw`) &
    !is.na(`I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw`) &
    !is.na(`I see myself as someone who HAS AN ACTIVE IMAGINATION._raw`)
  ) %>%
  
  # Create subscale scores for each personality trait
  mutate(
    Extraversion = rowMeans(select(., starts_with("I see myself as someone who IS RESERVED._raw"),
                                  starts_with("I see myself as someone who IS OUTGOING, SOCIABLE._raw")), na.rm = TRUE),
    Agreeableness = rowMeans(select(., starts_with("I see myself as someone who IS GENERALLY TRUSTING._raw"),
                                  starts_with("I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw")), na.rm = TRUE),
    Conscientiousness = rowMeans(select(., starts_with("I see myself as someone who TENDS TO BE LAZY._raw"),
                                       starts_with("I see myself as someone who DOES A THOROUGH JOB._raw")), na.rm = TRUE),
    Neuroticism = rowMeans(select(., starts_with("I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw"),
                                 starts_with("I see myself as someone who GETS NERVOUS EASILY._raw")), na.rm = TRUE),
    Openness_to_Experience = rowMeans(select(., starts_with("I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw"),
                                           starts_with("I see myself as someone who HAS AN ACTIVE IMAGINATION._raw")), na.rm = TRUE)
  )

# Summarize each subscale by computing the average, standard deviation, and N
AR_BFI_10_summary <- AR_BFI_10_subscales %>%
  summarise(
    Extraversion_Avg = mean(Extraversion, na.rm = TRUE),
    Extraversion_SD = sd(Extraversion, na.rm = TRUE),
    Extraversion_N = sum(!is.na(Extraversion)),
    
    Agreeableness_Avg = mean(Agreeableness, na.rm = TRUE),
    Agreeableness_SD = sd(Agreeableness, na.rm = TRUE),
    Agreeableness_N = sum(!is.na(Agreeableness)),
    
    Conscientiousness_Avg = mean(Conscientiousness, na.rm = TRUE),
    Conscientiousness_SD = sd(Conscientiousness, na.rm = TRUE),
    Conscientiousness_N = sum(!is.na(Conscientiousness)),
    
    Neuroticism_Avg = mean(Neuroticism, na.rm = TRUE),
    Neuroticism_SD = sd(Neuroticism, na.rm = TRUE),
    Neuroticism_N = sum(!is.na(Neuroticism)),
    
    Openness_to_Experience_Avg = mean(Openness_to_Experience, na.rm = TRUE),
    Openness_to_Experience_SD = sd(Openness_to_Experience, na.rm = TRUE),
    Openness_to_Experience_N = sum(!is.na(Openness_to_Experience))
  )

# View the result
print(AR_BFI_10_summary)

```

```{r}
#| label: SURPS subscale scores (ALL RESPONDENTS)

# Convert SURPS responses to numeric values based on a 4-point scale
AR_SURPS_subscales <- AR_personality %>%
  mutate(across(
    c(
      "I am content.",
      "I often don't think things through before I speak.",
      "I would like to skydive.",
      "I am happy.",
      "I often involve myself in situations that I later regret being involved in.",
      "I enjoy new and exciting experiences even if they are unconventional.",
      "I have faith that my future holds great promise.",
      "It's frightening to feel dizzy or faint.",
      "I like doing things that frighten me a little.",
      "It frightens me when I feel my heart beat change.",
      "I usually act without stopping to think.",
      "I would like to learn how to drive a motorcycle.",
      "I feel proud of my accomplishments.",
      "I get scared when I'm too nervous.",
      "Generally, I am an impulsive person.",
      "I am interested in experience for its own sake even if it is illegal.",
      "I feel that I'm a failure.",
      "I get scared when I experience unusual body sensations.",
      "I would enjoy hiking long distances in wild and uninhabited territory.",
      "I feel pleasant.",
      "It scares me when I'm unable to focus on a task.",
      "I feel I have to be manipulative to get what I want.",
      "I am very enthusiastic about my future."
    ), 
    ~ case_when(
      . == "Strongly Disagree" ~ 1,
      . == "Disagree" ~ 2,
      . == "Agree" ~ 3,
      . == "Strongly Agree" ~ 4,
      TRUE ~ NA_real_  # Handle any invalid responses
    ), .names = "{.col}_raw")) %>%
  
  # Reverse code the appropriate items (1, 4, 7, 13, 20, 23)
  mutate(
    `I am content._raw` = 5 - `I am content._raw`,
    `I am happy._raw` = 5 - `I am happy._raw`,
    `I have faith that my future holds great promise._raw` = 5 - `I have faith that my future holds great promise._raw`,
    `I feel proud of my accomplishments._raw` = 5 - `I feel proud of my accomplishments._raw`,
    `I feel pleasant._raw` = 5 - `I feel pleasant._raw`,
    `I feel that I'm a failure._raw` = 5 - `I feel that I'm a failure._raw`
  ) %>%
  
  # Handle missing data (NA) by removing rows with NA values in the relevant columns
  filter(
    !is.na(`I am content._raw`) & 
    !is.na(`I often don't think things through before I speak._raw`) &
    !is.na(`I would like to skydive._raw`) &
    !is.na(`I am happy._raw`) &
    !is.na(`I often involve myself in situations that I later regret being involved in._raw`) &
    !is.na(`I enjoy new and exciting experiences even if they are unconventional._raw`) &
    !is.na(`I have faith that my future holds great promise._raw`) &
    !is.na(`It's frightening to feel dizzy or faint._raw`) &
    !is.na(`I like doing things that frighten me a little._raw`) &
    !is.na(`It frightens me when I feel my heart beat change._raw`) &
    !is.na(`I usually act without stopping to think._raw`) &
    !is.na(`I would like to learn how to drive a motorcycle._raw`) &
    !is.na(`I feel proud of my accomplishments._raw`) &
    !is.na(`I get scared when I'm too nervous._raw`) &
    !is.na(`Generally, I am an impulsive person._raw`) &
    !is.na(`I am interested in experience for its own sake even if it is illegal._raw`) &
    !is.na(`I feel that I'm a failure._raw`) &
    !is.na(`I get scared when I experience unusual body sensations._raw`) &
    !is.na(`I would enjoy hiking long distances in wild and uninhabited territory._raw`) &
    !is.na(`I feel pleasant._raw`) &
    !is.na(`It scares me when I'm unable to focus on a task._raw`) &
    !is.na(`I feel I have to be manipulative to get what I want._raw`) &
    !is.na(`I am very enthusiastic about my future._raw`)
  ) %>%
  
  # Create subscale scores for each personality trait
  mutate(
    Hopelessness = rowMeans(select(., starts_with("I am content._raw"),
                                  starts_with("I am happy._raw"),
                                  starts_with("I have faith that my future holds great promise._raw"),
                                  starts_with("I feel proud of my accomplishments._raw"),
                                  starts_with("I feel that I'm a failure._raw"),
                                  starts_with("I feel pleasant._raw")), na.rm = TRUE),
    Anxiety_Sensitivity = rowMeans(select(., starts_with("It's frightening to feel dizzy or faint._raw"),
                                         starts_with("I like doing things that frighten me a little._raw"),
                                         starts_with("It frightens me when I feel my heart beat change._raw"),
                                         starts_with("I get scared when I'm too nervous._raw"),
                                         starts_with("I get scared when I experience unusual body sensations._raw")), na.rm = TRUE),
    Impulsivity = rowMeans(select(., starts_with("I often don't think things through before I speak._raw"),
                                 starts_with("I often involve myself in situations that I later regret being involved in._raw"),
                                 starts_with("I usually act without stopping to think._raw"),
                                 starts_with("Generally, I am an impulsive person._raw"),
                                 starts_with("I feel I have to be manipulative to get what I want._raw")), na.rm = TRUE),
    Sensation_Seeking = rowMeans(select(., starts_with("I would like to skydive._raw"),
                                       starts_with("I enjoy new and exciting experiences even if they are unconventional._raw"),
                                       starts_with("I would like to learn how to drive a motorcycle._raw"),
                                       starts_with("I would enjoy hiking long distances in wild and uninhabited territory._raw"),
                                       starts_with("I am very enthusiastic about my future._raw")), na.rm = TRUE)
  )

# Summarize each subscale by computing the average, standard deviation, and N
AR_SURPS_summary <- AR_SURPS_subscales %>%
  summarise(
    Hopelessness_Avg = mean(Hopelessness, na.rm = TRUE),
    Hopelessness_SD = sd(Hopelessness, na.rm = TRUE),
    Hopelessness_N = sum(!is.na(Hopelessness)),
    
    Anxiety_Sensitivity_Avg = mean(Anxiety_Sensitivity, na.rm = TRUE),
    Anxiety_Sensitivity_SD = sd(Anxiety_Sensitivity, na.rm = TRUE),
    Anxiety_Sensitivity_N = sum(!is.na(Anxiety_Sensitivity)),
    
    Impulsivity_Avg = mean(Impulsivity, na.rm = TRUE),
    Impulsivity_SD = sd(Impulsivity, na.rm = TRUE),
    Impulsivity_N = sum(!is.na(Impulsivity)),
    
    Sensation_Seeking_Avg = mean(Sensation_Seeking, na.rm = TRUE),
    Sensation_Seeking_SD = sd(Sensation_Seeking, na.rm = TRUE),
    Sensation_Seeking_N = sum(!is.na(Sensation_Seeking))
  )

# View the result
print(AR_SURPS_summary)

```

```{r}
#| label: CISS-21 subscale scoring (ALL RESPONDENTS)

# Convert CISS-21 responses to numeric values
AR_CISS_21_subscales <- AR_personality %>%
  mutate(across(
    c(
      "Take some time off and get away from the situation.",
      "Focus on the problem and see how I can solve it.",
      "Blame myself for having gotten into this situation.",
      "Treat myself to a favorite food or snack.",
      "Feel anxious about not being able to cope.",
      "Think about how I solved similar problems.",
      "Visit a friend.",
      "Determine a course of action and follow it.",
      "Buy myself something.",
      "Blame myself for being too emotional about the situation.",
      "Work to understand the situation.",
      "Become very upset.",
      "Take corrective action immediately.",
      "Blame myself for not knowing what to do.",
      "Spend time with a special person.",
      "Think about the event and learn from my mistakes.",
      "Wish that I could change what had happened or how I felt.",
      "Go out for a snack or meal.",
      "Analyze my problem before reacting.",
      "Focus on my general inadequacies.",
      "Phone a friend."
    ), 
    ~ case_when(
      . == "ALMOST NEVER" ~ 1,
      . == "ALMOST ALWAYS" ~ 5,
      . == "2" ~ 2,
      . == "3" ~ 3,
      . == "4" ~ 4,
      TRUE ~ NA_real_  # In case of any other unexpected values
    ), .names = "{.col}_raw")) %>%
  
  # Reverse code the appropriate items for avoidance and emotion-oriented coping (1, 4, 7, 9, 15, 18, 21)
  mutate(
    `Take some time off and get away from the situation._raw` = 6 - `Take some time off and get away from the situation._raw`,
    `Treat myself to a favorite food or snack._raw` = 6 - `Treat myself to a favorite food or snack._raw`,
    `Visit a friend._raw` = 6 - `Visit a friend._raw`,
    `Buy myself something._raw` = 6 - `Buy myself something._raw`,
    `Spend time with a special person._raw` = 6 - `Spend time with a special person._raw`,
    `Go out for a snack or meal._raw` = 6 - `Go out for a snack or meal._raw`,
    `Phone a friend._raw` = 6 - `Phone a friend._raw`
  ) %>%
  
  # Create subscale scores for each coping style with na.rm = TRUE to handle missing values
  mutate(
    Avoidance_Coping = rowMeans(select(., starts_with("Take some time off and get away from the situation._raw"),
                                      starts_with("Treat myself to a favorite food or snack._raw"),
                                      starts_with("Visit a friend._raw"),
                                      starts_with("Buy myself something._raw"),
                                      starts_with("Spend time with a special person._raw"),
                                      starts_with("Go out for a snack or meal._raw"),
                                      starts_with("Phone a friend._raw")), na.rm = TRUE),
    
    Task_Oriented_Coping = rowMeans(select(., starts_with("Focus on the problem and see how I can solve it._raw"),
                                          starts_with("Think about how I solved similar problems._raw"),
                                          starts_with("Determine a course of action and follow it._raw"),
                                          starts_with("Work to understand the situation._raw"),
                                          starts_with("Take corrective action immediately._raw"),
                                          starts_with("Think about the event and learn from my mistakes._raw"),
                                          starts_with("Analyze my problem before reacting._raw")), na.rm = TRUE),
    
    Emotion_Oriented_Coping = rowMeans(select(., starts_with("Blame myself for having gotten into this situation._raw"),
                                            starts_with("Feel anxious about not being able to cope._raw"),
                                            starts_with("Blame myself for being too emotional about the situation._raw"),
                                            starts_with("Become very upset._raw"),
                                            starts_with("Blame myself for not knowing what to do._raw"),
                                            starts_with("Wish that I could change what had happened or how I felt._raw"),
                                            starts_with("Focus on my general inadequacies._raw")), na.rm = TRUE)
  )

# Summarize each subscale by computing the average, standard deviation, and N
AR_CISS_21_summary <- AR_CISS_21_subscales %>%
  summarise(
    Avoidance_Coping_Avg = mean(Avoidance_Coping, na.rm = TRUE),
    Avoidance_Coping_SD = sd(Avoidance_Coping, na.rm = TRUE),
    Avoidance_Coping_N = sum(!is.na(Avoidance_Coping)),
    
    Task_Oriented_Coping_Avg = mean(Task_Oriented_Coping, na.rm = TRUE),
    Task_Oriented_Coping_SD = sd(Task_Oriented_Coping, na.rm = TRUE),
    Task_Oriented_Coping_N = sum(!is.na(Task_Oriented_Coping)),
    
    Emotion_Oriented_Coping_Avg = mean(Emotion_Oriented_Coping, na.rm = TRUE),
    Emotion_Oriented_Coping_SD = sd(Emotion_Oriented_Coping, na.rm = TRUE),
    Emotion_Oriented_Coping_N = sum(!is.na(Emotion_Oriented_Coping))
  )

# View the result
print(AR_CISS_21_summary)

```

## STOPPED Personality Calculations (STOPPED)

This is the code I will use to calculate the mean, sd, and N for all the personality measures but only for those who stopped using BZRAs.

```{r}
#| label: Creating New Object for Those Who Stopped
# The object 'STOPPED_demo' contains all people that meet our new inclusion criteria. Keep calling this object rather than doing the filter calculations everytime.

STOPPED_personality <- SIMOA %>%
  filter(
    # Age conditions
    (`What is your age?` >= 65 & !is.na(`What is your age?`)) | 
    (`Are you 65 or older?` == "Yes"),
    # Sleeping pill question condition
    !is.na(`Which of the listed prescription sleeping pills have you taken 'regularly' in the past two (2) years?`),
    # New condition for 'Stopped taking these medications? Yes or No'
    `Stopped taking these medications? Yes or No` == "Yes"
  )

```

```{r}
#| label: DBAS-16 subscale scoring (STOPPED)

# Convert DBAS-16 responses to numeric values
STOPPED_DBAS_16_subscales <- STOPPED_personality %>%
  mutate(across(
    c(
      "I need 8 hours of sleep to feel refreshed and function well during the day.",
      "When I don't get the proper amount of sleep on a given night, I need to catch up the next day by napping or on the next night by sleeping longer."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Expectations_{.col}")) %>%
  
  mutate(across(
    c(
      "After a poor night's sleep, I know that it will interfere with my daily activities the next day.",
      "When I feel irritable, depressed, or anxious during the day, it is mostly because I did not sleep well the night before.",
      "Without an adequate night's sleep, I can hardly function the next day.",
      "When I feel tired, have no energy, or just seem not to function well during the day, it is generally because I did not sleep well the night before.",
      "I avoid or cancel obligations (social, family) after a poor night's sleep."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Consequences_{.col}")) %>%
  
  mutate(across(
    c(
      "I am concerned that chronic insomnia may have serious consequences on my physical health.",
      "I am worried that I may lose control over my abilities to sleep.",
      "When I sleep poorly on one night, I know it will disturb my sleep schedule for the whole week.",
      "I can't ever predict whether I'll have a good or poor night's sleep.",
      "I have little ability to manage the negative consequences of disturbed sleep.",
      "I feel insomnia is ruining my ability to enjoy life and prevents me from doing what I want."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Worry_Helplessness_{.col}")) %>%
  
  mutate(across(
    c(
      "In order to be alert and function well during the day, I believe I would be better off taking a sleeping pill rather than having a poor night's sleep.",
      "I believe insomnia is essentially the result of a chemical imbalance.",
      "Medication is probably the only solution to sleeplessness."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Medication_{.col}"))

# Calculate the subscale averages and standard deviations, ensuring valid responses for each question
STOPPED_DBAS_16_avg_sd_n <- STOPPED_DBAS_16_subscales %>%
  mutate(
    Expectations_N = rowSums(!is.na(select(., starts_with("Expectations_")))),
    Consequences_N = rowSums(!is.na(select(., starts_with("Consequences_")))),
    Worry_Helplessness_N = rowSums(!is.na(select(., starts_with("Worry_Helplessness_")))),
    Medication_N = rowSums(!is.na(select(., starts_with("Medication_"))))
  ) %>%
  
  # Only keep rows where all questions in the subscale have valid responses (N = number of complete responses)
  filter(
    Expectations_N == 2,  # 2 questions in the Expectations subscale
    Consequences_N == 5,  # 5 questions in the Consequences subscale
    Worry_Helplessness_N == 6,  # 6 questions in the Worry_Helplessness subscale
    Medication_N == 3  # 3 questions in the Medication subscale
  ) %>%
  
  summarise(
    Expectations_Avg = mean(c_across(starts_with("Expectations_")), na.rm = TRUE),
    Expectations_SD = sd(c_across(starts_with("Expectations_")), na.rm = TRUE),
    Expectations_N = n(),
    
    Consequences_Avg = mean(c_across(starts_with("Consequences_")), na.rm = TRUE),
    Consequences_SD = sd(c_across(starts_with("Consequences_")), na.rm = TRUE),
    Consequences_N = n(),
    
    Worry_Helplessness_Avg = mean(c_across(starts_with("Worry_Helplessness_")), na.rm = TRUE),
    Worry_Helplessness_SD = sd(c_across(starts_with("Worry_Helplessness_")), na.rm = TRUE),
    Worry_Helplessness_N = n(),
    
    Medication_Avg = mean(c_across(starts_with("Medication_")), na.rm = TRUE),
    Medication_SD = sd(c_across(starts_with("Medication_")), na.rm = TRUE),
    Medication_N = n()
  )

# View the result
print(STOPPED_DBAS_16_avg_sd_n)

```

```{r}
#| label: BFI-10 subscale scoring (STOPPED)

# Convert BFI-10 responses to numeric values
STOPPED_BFI_10_subscales <- STOPPED_personality %>%
  mutate(across(
    c(
      "I see myself as someone who IS RESERVED.",
      "I see myself as someone who IS GENERALLY TRUSTING.",
      "I see myself as someone who TENDS TO BE LAZY.",
      "I see myself as someone who IS RELAXED, HANDLES STRESS WELL.",
      "I see myself as someone who HAS FEW ARTISTIC INTERESTS.",
      "I see myself as someone who IS OUTGOING, SOCIABLE.",
      "I see myself as someone who TENDS TO FIND FAULT WITH OTHERS.",
      "I see myself as someone who DOES A THOROUGH JOB.",
      "I see myself as someone who GETS NERVOUS EASILY.",
      "I see myself as someone who HAS AN ACTIVE IMAGINATION."
    ), 
    ~ case_when(
      . == "Disagree strongly" ~ 1,
      . == "Disagree a little" ~ 2,
      . == "Neither agree nor disagree" ~ 3,
      . == "Agree a little" ~ 4,
      . == "Agree strongly" ~ 5,
      TRUE ~ NA_real_  # In case of any other unexpected values
    ), .names = "{.col}_raw")) %>%
  
  # Reverse code the appropriate items (1, 7, 3, 4, and 5)
  mutate(
    `I see myself as someone who IS RESERVED._raw` = 6 - `I see myself as someone who IS RESERVED._raw`,
    `I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw` = 6 - `I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw`,
    `I see myself as someone who TENDS TO BE LAZY._raw` = 6 - `I see myself as someone who TENDS TO BE LAZY._raw`,
    `I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw` = 6 - `I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw`,
    `I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw` = 6 - `I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw`
  ) %>%
  
  # Handle missing data (NA) by removing rows with NA values in the relevant columns
  filter(
    !is.na(`I see myself as someone who IS RESERVED._raw`) & 
    !is.na(`I see myself as someone who IS OUTGOING, SOCIABLE._raw`) &
    !is.na(`I see myself as someone who IS GENERALLY TRUSTING._raw`) &
    !is.na(`I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw`) &
    !is.na(`I see myself as someone who TENDS TO BE LAZY._raw`) &
    !is.na(`I see myself as someone who DOES A THOROUGH JOB._raw`) &
    !is.na(`I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw`) &
    !is.na(`I see myself as someone who GETS NERVOUS EASILY._raw`) &
    !is.na(`I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw`) &
    !is.na(`I see myself as someone who HAS AN ACTIVE IMAGINATION._raw`)
  ) %>%
  
  # Create subscale scores for each personality trait
  mutate(
    Extraversion = rowMeans(select(., starts_with("I see myself as someone who IS RESERVED._raw"),
                                  starts_with("I see myself as someone who IS OUTGOING, SOCIABLE._raw")), na.rm = TRUE),
    Agreeableness = rowMeans(select(., starts_with("I see myself as someone who IS GENERALLY TRUSTING._raw"),
                                  starts_with("I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw")), na.rm = TRUE),
    Conscientiousness = rowMeans(select(., starts_with("I see myself as someone who TENDS TO BE LAZY._raw"),
                                       starts_with("I see myself as someone who DOES A THOROUGH JOB._raw")), na.rm = TRUE),
    Neuroticism = rowMeans(select(., starts_with("I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw"),
                                 starts_with("I see myself as someone who GETS NERVOUS EASILY._raw")), na.rm = TRUE),
    Openness_to_Experience = rowMeans(select(., starts_with("I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw"),
                                           starts_with("I see myself as someone who HAS AN ACTIVE IMAGINATION._raw")), na.rm = TRUE)
  )

# Summarize each subscale by computing the average, standard deviation, and N
STOPPED_BFI_10_summary <- STOPPED_BFI_10_subscales %>%
  summarise(
    Extraversion_Avg = mean(Extraversion, na.rm = TRUE),
    Extraversion_SD = sd(Extraversion, na.rm = TRUE),
    Extraversion_N = sum(!is.na(Extraversion)),
    
    Agreeableness_Avg = mean(Agreeableness, na.rm = TRUE),
    Agreeableness_SD = sd(Agreeableness, na.rm = TRUE),
    Agreeableness_N = sum(!is.na(Agreeableness)),
    
    Conscientiousness_Avg = mean(Conscientiousness, na.rm = TRUE),
    Conscientiousness_SD = sd(Conscientiousness, na.rm = TRUE),
    Conscientiousness_N = sum(!is.na(Conscientiousness)),
    
    Neuroticism_Avg = mean(Neuroticism, na.rm = TRUE),
    Neuroticism_SD = sd(Neuroticism, na.rm = TRUE),
    Neuroticism_N = sum(!is.na(Neuroticism)),
    
    Openness_to_Experience_Avg = mean(Openness_to_Experience, na.rm = TRUE),
    Openness_to_Experience_SD = sd(Openness_to_Experience, na.rm = TRUE),
    Openness_to_Experience_N = sum(!is.na(Openness_to_Experience))
  )

# View the result
print(STOPPED_BFI_10_summary)

```

```{r}
#| label: SURPS subscale scores (STOPPED)

# Convert SURPS responses to numeric values based on a 4-point scale
STOPPED_SURPS_subscales <- STOPPED_personality %>%
  mutate(across(
    c(
      "I am content.",
      "I often don't think things through before I speak.",
      "I would like to skydive.",
      "I am happy.",
      "I often involve myself in situations that I later regret being involved in.",
      "I enjoy new and exciting experiences even if they are unconventional.",
      "I have faith that my future holds great promise.",
      "It's frightening to feel dizzy or faint.",
      "I like doing things that frighten me a little.",
      "It frightens me when I feel my heart beat change.",
      "I usually act without stopping to think.",
      "I would like to learn how to drive a motorcycle.",
      "I feel proud of my accomplishments.",
      "I get scared when I'm too nervous.",
      "Generally, I am an impulsive person.",
      "I am interested in experience for its own sake even if it is illegal.",
      "I feel that I'm a failure.",
      "I get scared when I experience unusual body sensations.",
      "I would enjoy hiking long distances in wild and uninhabited territory.",
      "I feel pleasant.",
      "It scares me when I'm unable to focus on a task.",
      "I feel I have to be manipulative to get what I want.",
      "I am very enthusiastic about my future."
    ), 
    ~ case_when(
      . == "Strongly Disagree" ~ 1,
      . == "Disagree" ~ 2,
      . == "Agree" ~ 3,
      . == "Strongly Agree" ~ 4,
      TRUE ~ NA_real_  # Handle any invalid responses
    ), .names = "{.col}_raw")) %>%
  
  # Reverse code the appropriate items (1, 4, 7, 13, 20, 23)
  mutate(
    `I am content._raw` = 5 - `I am content._raw`,
    `I am happy._raw` = 5 - `I am happy._raw`,
    `I have faith that my future holds great promise._raw` = 5 - `I have faith that my future holds great promise._raw`,
    `I feel proud of my accomplishments._raw` = 5 - `I feel proud of my accomplishments._raw`,
    `I feel pleasant._raw` = 5 - `I feel pleasant._raw`,
    `I feel that I'm a failure._raw` = 5 - `I feel that I'm a failure._raw`
  ) %>%
  
  # Handle missing data (NA) by removing rows with NA values in the relevant columns
  filter(
    !is.na(`I am content._raw`) & 
    !is.na(`I often don't think things through before I speak._raw`) &
    !is.na(`I would like to skydive._raw`) &
    !is.na(`I am happy._raw`) &
    !is.na(`I often involve myself in situations that I later regret being involved in._raw`) &
    !is.na(`I enjoy new and exciting experiences even if they are unconventional._raw`) &
    !is.na(`I have faith that my future holds great promise._raw`) &
    !is.na(`It's frightening to feel dizzy or faint._raw`) &
    !is.na(`I like doing things that frighten me a little._raw`) &
    !is.na(`It frightens me when I feel my heart beat change._raw`) &
    !is.na(`I usually act without stopping to think._raw`) &
    !is.na(`I would like to learn how to drive a motorcycle._raw`) &
    !is.na(`I feel proud of my accomplishments._raw`) &
    !is.na(`I get scared when I'm too nervous._raw`) &
    !is.na(`Generally, I am an impulsive person._raw`) &
    !is.na(`I am interested in experience for its own sake even if it is illegal._raw`) &
    !is.na(`I feel that I'm a failure._raw`) &
    !is.na(`I get scared when I experience unusual body sensations._raw`) &
    !is.na(`I would enjoy hiking long distances in wild and uninhabited territory._raw`) &
    !is.na(`I feel pleasant._raw`) &
    !is.na(`It scares me when I'm unable to focus on a task._raw`) &
    !is.na(`I feel I have to be manipulative to get what I want._raw`) &
    !is.na(`I am very enthusiastic about my future._raw`)
  ) %>%
  
  # Create subscale scores for each personality trait
  mutate(
    Hopelessness = rowMeans(select(., starts_with("I am content._raw"),
                                  starts_with("I am happy._raw"),
                                  starts_with("I have faith that my future holds great promise._raw"),
                                  starts_with("I feel proud of my accomplishments._raw"),
                                  starts_with("I feel that I'm a failure._raw"),
                                  starts_with("I feel pleasant._raw")), na.rm = TRUE),
    Anxiety_Sensitivity = rowMeans(select(., starts_with("It's frightening to feel dizzy or faint._raw"),
                                         starts_with("I like doing things that frighten me a little._raw"),
                                         starts_with("It frightens me when I feel my heart beat change._raw"),
                                         starts_with("I get scared when I'm too nervous._raw"),
                                         starts_with("I get scared when I experience unusual body sensations._raw")), na.rm = TRUE),
    Impulsivity = rowMeans(select(., starts_with("I often don't think things through before I speak._raw"),
                                 starts_with("I often involve myself in situations that I later regret being involved in._raw"),
                                 starts_with("I usually act without stopping to think._raw"),
                                 starts_with("Generally, I am an impulsive person._raw"),
                                 starts_with("I feel I have to be manipulative to get what I want._raw")), na.rm = TRUE),
    Sensation_Seeking = rowMeans(select(., starts_with("I would like to skydive._raw"),
                                       starts_with("I enjoy new and exciting experiences even if they are unconventional._raw"),
                                       starts_with("I would like to learn how to drive a motorcycle._raw"),
                                       starts_with("I would enjoy hiking long distances in wild and uninhabited territory._raw"),
                                       starts_with("I am very enthusiastic about my future._raw")), na.rm = TRUE)
  )

# Summarize each subscale by computing the average, standard deviation, and N
STOPPED_SURPS_summary <- STOPPED_SURPS_subscales %>%
  summarise(
    Hopelessness_Avg = mean(Hopelessness, na.rm = TRUE),
    Hopelessness_SD = sd(Hopelessness, na.rm = TRUE),
    Hopelessness_N = sum(!is.na(Hopelessness)),
    
    Anxiety_Sensitivity_Avg = mean(Anxiety_Sensitivity, na.rm = TRUE),
    Anxiety_Sensitivity_SD = sd(Anxiety_Sensitivity, na.rm = TRUE),
    Anxiety_Sensitivity_N = sum(!is.na(Anxiety_Sensitivity)),
    
    Impulsivity_Avg = mean(Impulsivity, na.rm = TRUE),
    Impulsivity_SD = sd(Impulsivity, na.rm = TRUE),
    Impulsivity_N = sum(!is.na(Impulsivity)),
    
    Sensation_Seeking_Avg = mean(Sensation_Seeking, na.rm = TRUE),
    Sensation_Seeking_SD = sd(Sensation_Seeking, na.rm = TRUE),
    Sensation_Seeking_N = sum(!is.na(Sensation_Seeking))
  )

# View the result
print(STOPPED_SURPS_summary)

```

```{r}
#| label: CISS-21 subscale scoring (STOPPED)

# Convert CISS-21 responses to numeric values
STOPPED_CISS_21_subscales <- STOPPED_personality %>%
  mutate(across(
    c(
      "Take some time off and get away from the situation.",
      "Focus on the problem and see how I can solve it.",
      "Blame myself for having gotten into this situation.",
      "Treat myself to a favorite food or snack.",
      "Feel anxious about not being able to cope.",
      "Think about how I solved similar problems.",
      "Visit a friend.",
      "Determine a course of action and follow it.",
      "Buy myself something.",
      "Blame myself for being too emotional about the situation.",
      "Work to understand the situation.",
      "Become very upset.",
      "Take corrective action immediately.",
      "Blame myself for not knowing what to do.",
      "Spend time with a special person.",
      "Think about the event and learn from my mistakes.",
      "Wish that I could change what had happened or how I felt.",
      "Go out for a snack or meal.",
      "Analyze my problem before reacting.",
      "Focus on my general inadequacies.",
      "Phone a friend."
    ), 
    ~ case_when(
      . == "ALMOST NEVER" ~ 1,
      . == "ALMOST ALWAYS" ~ 5,
      . == "2" ~ 2,
      . == "3" ~ 3,
      . == "4" ~ 4,
      TRUE ~ NA_real_  # In case of any other unexpected values
    ), .names = "{.col}_raw")) %>%
  
  # Reverse code the appropriate items for avoidance and emotion-oriented coping (1, 4, 7, 9, 15, 18, 21)
  mutate(
    `Take some time off and get away from the situation._raw` = 6 - `Take some time off and get away from the situation._raw`,
    `Treat myself to a favorite food or snack._raw` = 6 - `Treat myself to a favorite food or snack._raw`,
    `Visit a friend._raw` = 6 - `Visit a friend._raw`,
    `Buy myself something._raw` = 6 - `Buy myself something._raw`,
    `Spend time with a special person._raw` = 6 - `Spend time with a special person._raw`,
    `Go out for a snack or meal._raw` = 6 - `Go out for a snack or meal._raw`,
    `Phone a friend._raw` = 6 - `Phone a friend._raw`
  ) %>%
  
  # Create subscale scores for each coping style with na.rm = TRUE to handle missing values
  mutate(
    Avoidance_Coping = rowMeans(select(., starts_with("Take some time off and get away from the situation._raw"),
                                      starts_with("Treat myself to a favorite food or snack._raw"),
                                      starts_with("Visit a friend._raw"),
                                      starts_with("Buy myself something._raw"),
                                      starts_with("Spend time with a special person._raw"),
                                      starts_with("Go out for a snack or meal._raw"),
                                      starts_with("Phone a friend._raw")), na.rm = TRUE),
    
    Task_Oriented_Coping = rowMeans(select(., starts_with("Focus on the problem and see how I can solve it._raw"),
                                          starts_with("Think about how I solved similar problems._raw"),
                                          starts_with("Determine a course of action and follow it._raw"),
                                          starts_with("Work to understand the situation._raw"),
                                          starts_with("Take corrective action immediately._raw"),
                                          starts_with("Think about the event and learn from my mistakes._raw"),
                                          starts_with("Analyze my problem before reacting._raw")), na.rm = TRUE),
    
    Emotion_Oriented_Coping = rowMeans(select(., starts_with("Blame myself for having gotten into this situation._raw"),
                                            starts_with("Feel anxious about not being able to cope._raw"),
                                            starts_with("Blame myself for being too emotional about the situation._raw"),
                                            starts_with("Become very upset._raw"),
                                            starts_with("Blame myself for not knowing what to do._raw"),
                                            starts_with("Wish that I could change what had happened or how I felt._raw"),
                                            starts_with("Focus on my general inadequacies._raw")), na.rm = TRUE)
  )

# Summarize each subscale by computing the average, standard deviation, and N
STOPPED_CISS_21_summary <- STOPPED_CISS_21_subscales %>%
  summarise(
    Avoidance_Coping_Avg = mean(Avoidance_Coping, na.rm = TRUE),
    Avoidance_Coping_SD = sd(Avoidance_Coping, na.rm = TRUE),
    Avoidance_Coping_N = sum(!is.na(Avoidance_Coping)),
    
    Task_Oriented_Coping_Avg = mean(Task_Oriented_Coping, na.rm = TRUE),
    Task_Oriented_Coping_SD = sd(Task_Oriented_Coping, na.rm = TRUE),
    Task_Oriented_Coping_N = sum(!is.na(Task_Oriented_Coping)),
    
    Emotion_Oriented_Coping_Avg = mean(Emotion_Oriented_Coping, na.rm = TRUE),
    Emotion_Oriented_Coping_SD = sd(Emotion_Oriented_Coping, na.rm = TRUE),
    Emotion_Oriented_Coping_N = sum(!is.na(Emotion_Oriented_Coping))
  )

# View the result
print(STOPPED_CISS_21_summary)

```

## USING Personality Calculations (USING)

This is the code I will use to calculate the mean, sd, and N for all the personality measures but only for those who are still using BZRAs.

```{r}
#| label: Creating New Object for Those Still Using
# The object 'STOPPED_demo' contains all people that meet our new inclusion criteria. Keep calling this object rather than doing the filter calculations everytime.

USING_personality <- SIMOA %>%
  filter(
    # Age conditions
    (`What is your age?` >= 65 & !is.na(`What is your age?`)) | 
    (`Are you 65 or older?` == "Yes"),
    # Sleeping pill question condition
    !is.na(`Which of the listed prescription sleeping pills have you taken 'regularly' in the past two (2) years?`),
    # New condition for 'Stopped taking these medications? Yes or No'
    `Stopped taking these medications? Yes or No` == "No"
  )

```

```{r}
#| label: DBAS-16 subscale scoring (USING)

# Convert DBAS-16 responses to numeric values
USING_DBAS_16_subscales <- USING_personality %>%
  mutate(across(
    c(
      "I need 8 hours of sleep to feel refreshed and function well during the day.",
      "When I don't get the proper amount of sleep on a given night, I need to catch up the next day by napping or on the next night by sleeping longer."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Expectations_{.col}")) %>%
  
  mutate(across(
    c(
      "After a poor night's sleep, I know that it will interfere with my daily activities the next day.",
      "When I feel irritable, depressed, or anxious during the day, it is mostly because I did not sleep well the night before.",
      "Without an adequate night's sleep, I can hardly function the next day.",
      "When I feel tired, have no energy, or just seem not to function well during the day, it is generally because I did not sleep well the night before.",
      "I avoid or cancel obligations (social, family) after a poor night's sleep."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Consequences_{.col}")) %>%
  
  mutate(across(
    c(
      "I am concerned that chronic insomnia may have serious consequences on my physical health.",
      "I am worried that I may lose control over my abilities to sleep.",
      "When I sleep poorly on one night, I know it will disturb my sleep schedule for the whole week.",
      "I can't ever predict whether I'll have a good or poor night's sleep.",
      "I have little ability to manage the negative consequences of disturbed sleep.",
      "I feel insomnia is ruining my ability to enjoy life and prevents me from doing what I want."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Worry_Helplessness_{.col}")) %>%
  
  mutate(across(
    c(
      "In order to be alert and function well during the day, I believe I would be better off taking a sleeping pill rather than having a poor night's sleep.",
      "I believe insomnia is essentially the result of a chemical imbalance.",
      "Medication is probably the only solution to sleeplessness."
    ), ~ as.numeric(str_extract(., "\\d+")), .names = "Medication_{.col}"))

# Calculate the subscale averages and standard deviations, ensuring valid responses for each question
USING_DBAS_16_avg_sd_n <- USING_DBAS_16_subscales %>%
  mutate(
    Expectations_N = rowSums(!is.na(select(., starts_with("Expectations_")))),
    Consequences_N = rowSums(!is.na(select(., starts_with("Consequences_")))),
    Worry_Helplessness_N = rowSums(!is.na(select(., starts_with("Worry_Helplessness_")))),
    Medication_N = rowSums(!is.na(select(., starts_with("Medication_"))))
  ) %>%
  
  # Only keep rows where all questions in the subscale have valid responses (N = number of complete responses)
  filter(
    Expectations_N == 2,  # 2 questions in the Expectations subscale
    Consequences_N == 5,  # 5 questions in the Consequences subscale
    Worry_Helplessness_N == 6,  # 6 questions in the Worry_Helplessness subscale
    Medication_N == 3  # 3 questions in the Medication subscale
  ) %>%
  
  summarise(
    Expectations_Avg = mean(c_across(starts_with("Expectations_")), na.rm = TRUE),
    Expectations_SD = sd(c_across(starts_with("Expectations_")), na.rm = TRUE),
    Expectations_N = n(),
    
    Consequences_Avg = mean(c_across(starts_with("Consequences_")), na.rm = TRUE),
    Consequences_SD = sd(c_across(starts_with("Consequences_")), na.rm = TRUE),
    Consequences_N = n(),
    
    Worry_Helplessness_Avg = mean(c_across(starts_with("Worry_Helplessness_")), na.rm = TRUE),
    Worry_Helplessness_SD = sd(c_across(starts_with("Worry_Helplessness_")), na.rm = TRUE),
    Worry_Helplessness_N = n(),
    
    Medication_Avg = mean(c_across(starts_with("Medication_")), na.rm = TRUE),
    Medication_SD = sd(c_across(starts_with("Medication_")), na.rm = TRUE),
    Medication_N = n()
  )

# View the result
print(USING_DBAS_16_avg_sd_n)

```

```{r}
#| label: BFI-10 subscale scoring (USING)

# Convert BFI-10 responses to numeric values
USING_BFI_10_subscales <- USING_personality %>%
  mutate(across(
    c(
      "I see myself as someone who IS RESERVED.",
      "I see myself as someone who IS GENERALLY TRUSTING.",
      "I see myself as someone who TENDS TO BE LAZY.",
      "I see myself as someone who IS RELAXED, HANDLES STRESS WELL.",
      "I see myself as someone who HAS FEW ARTISTIC INTERESTS.",
      "I see myself as someone who IS OUTGOING, SOCIABLE.",
      "I see myself as someone who TENDS TO FIND FAULT WITH OTHERS.",
      "I see myself as someone who DOES A THOROUGH JOB.",
      "I see myself as someone who GETS NERVOUS EASILY.",
      "I see myself as someone who HAS AN ACTIVE IMAGINATION."
    ), 
    ~ case_when(
      . == "Disagree strongly" ~ 1,
      . == "Disagree a little" ~ 2,
      . == "Neither agree nor disagree" ~ 3,
      . == "Agree a little" ~ 4,
      . == "Agree strongly" ~ 5,
      TRUE ~ NA_real_  # In case of any other unexpected values
    ), .names = "{.col}_raw")) %>%
  
  # Reverse code the appropriate items (1, 7, 3, 4, and 5)
  mutate(
    `I see myself as someone who IS RESERVED._raw` = 6 - `I see myself as someone who IS RESERVED._raw`,
    `I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw` = 6 - `I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw`,
    `I see myself as someone who TENDS TO BE LAZY._raw` = 6 - `I see myself as someone who TENDS TO BE LAZY._raw`,
    `I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw` = 6 - `I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw`,
    `I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw` = 6 - `I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw`
  ) %>%
  
  # Handle missing data (NA) by removing rows with NA values in the relevant columns
  filter(
    !is.na(`I see myself as someone who IS RESERVED._raw`) & 
    !is.na(`I see myself as someone who IS OUTGOING, SOCIABLE._raw`) &
    !is.na(`I see myself as someone who IS GENERALLY TRUSTING._raw`) &
    !is.na(`I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw`) &
    !is.na(`I see myself as someone who TENDS TO BE LAZY._raw`) &
    !is.na(`I see myself as someone who DOES A THOROUGH JOB._raw`) &
    !is.na(`I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw`) &
    !is.na(`I see myself as someone who GETS NERVOUS EASILY._raw`) &
    !is.na(`I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw`) &
    !is.na(`I see myself as someone who HAS AN ACTIVE IMAGINATION._raw`)
  ) %>%
  
  # Create subscale scores for each personality trait
  mutate(
    Extraversion = rowMeans(select(., starts_with("I see myself as someone who IS RESERVED._raw"),
                                  starts_with("I see myself as someone who IS OUTGOING, SOCIABLE._raw")), na.rm = TRUE),
    Agreeableness = rowMeans(select(., starts_with("I see myself as someone who IS GENERALLY TRUSTING._raw"),
                                  starts_with("I see myself as someone who TENDS TO FIND FAULT WITH OTHERS._raw")), na.rm = TRUE),
    Conscientiousness = rowMeans(select(., starts_with("I see myself as someone who TENDS TO BE LAZY._raw"),
                                       starts_with("I see myself as someone who DOES A THOROUGH JOB._raw")), na.rm = TRUE),
    Neuroticism = rowMeans(select(., starts_with("I see myself as someone who IS RELAXED, HANDLES STRESS WELL._raw"),
                                 starts_with("I see myself as someone who GETS NERVOUS EASILY._raw")), na.rm = TRUE),
    Openness_to_Experience = rowMeans(select(., starts_with("I see myself as someone who HAS FEW ARTISTIC INTERESTS._raw"),
                                           starts_with("I see myself as someone who HAS AN ACTIVE IMAGINATION._raw")), na.rm = TRUE)
  )

# Summarize each subscale by computing the average, standard deviation, and N
USING_BFI_10_summary <- USING_BFI_10_subscales %>%
  summarise(
    Extraversion_Avg = mean(Extraversion, na.rm = TRUE),
    Extraversion_SD = sd(Extraversion, na.rm = TRUE),
    Extraversion_N = sum(!is.na(Extraversion)),
    
    Agreeableness_Avg = mean(Agreeableness, na.rm = TRUE),
    Agreeableness_SD = sd(Agreeableness, na.rm = TRUE),
    Agreeableness_N = sum(!is.na(Agreeableness)),
    
    Conscientiousness_Avg = mean(Conscientiousness, na.rm = TRUE),
    Conscientiousness_SD = sd(Conscientiousness, na.rm = TRUE),
    Conscientiousness_N = sum(!is.na(Conscientiousness)),
    
    Neuroticism_Avg = mean(Neuroticism, na.rm = TRUE),
    Neuroticism_SD = sd(Neuroticism, na.rm = TRUE),
    Neuroticism_N = sum(!is.na(Neuroticism)),
    
    Openness_to_Experience_Avg = mean(Openness_to_Experience, na.rm = TRUE),
    Openness_to_Experience_SD = sd(Openness_to_Experience, na.rm = TRUE),
    Openness_to_Experience_N = sum(!is.na(Openness_to_Experience))
  )

# View the result
print(USING_BFI_10_summary)

```

```{r}
#| label: SURPS subscale scores (USING)

# Convert SURPS responses to numeric values based on a 4-point scale
USING_SURPS_subscales <- USING_personality %>%
  mutate(across(
    c(
      "I am content.",
      "I often don't think things through before I speak.",
      "I would like to skydive.",
      "I am happy.",
      "I often involve myself in situations that I later regret being involved in.",
      "I enjoy new and exciting experiences even if they are unconventional.",
      "I have faith that my future holds great promise.",
      "It's frightening to feel dizzy or faint.",
      "I like doing things that frighten me a little.",
      "It frightens me when I feel my heart beat change.",
      "I usually act without stopping to think.",
      "I would like to learn how to drive a motorcycle.",
      "I feel proud of my accomplishments.",
      "I get scared when I'm too nervous.",
      "Generally, I am an impulsive person.",
      "I am interested in experience for its own sake even if it is illegal.",
      "I feel that I'm a failure.",
      "I get scared when I experience unusual body sensations.",
      "I would enjoy hiking long distances in wild and uninhabited territory.",
      "I feel pleasant.",
      "It scares me when I'm unable to focus on a task.",
      "I feel I have to be manipulative to get what I want.",
      "I am very enthusiastic about my future."
    ), 
    ~ case_when(
      . == "Strongly Disagree" ~ 1,
      . == "Disagree" ~ 2,
      . == "Agree" ~ 3,
      . == "Strongly Agree" ~ 4,
      TRUE ~ NA_real_  # Handle any invalid responses
    ), .names = "{.col}_raw")) %>%
  
  # Reverse code the appropriate items (1, 4, 7, 13, 20, 23)
  mutate(
    `I am content._raw` = 5 - `I am content._raw`,
    `I am happy._raw` = 5 - `I am happy._raw`,
    `I have faith that my future holds great promise._raw` = 5 - `I have faith that my future holds great promise._raw`,
    `I feel proud of my accomplishments._raw` = 5 - `I feel proud of my accomplishments._raw`,
    `I feel pleasant._raw` = 5 - `I feel pleasant._raw`,
    `I feel that I'm a failure._raw` = 5 - `I feel that I'm a failure._raw`
  ) %>%
  
  # Handle missing data (NA) by removing rows with NA values in the relevant columns
  filter(
    !is.na(`I am content._raw`) & 
    !is.na(`I often don't think things through before I speak._raw`) &
    !is.na(`I would like to skydive._raw`) &
    !is.na(`I am happy._raw`) &
    !is.na(`I often involve myself in situations that I later regret being involved in._raw`) &
    !is.na(`I enjoy new and exciting experiences even if they are unconventional._raw`) &
    !is.na(`I have faith that my future holds great promise._raw`) &
    !is.na(`It's frightening to feel dizzy or faint._raw`) &
    !is.na(`I like doing things that frighten me a little._raw`) &
    !is.na(`It frightens me when I feel my heart beat change._raw`) &
    !is.na(`I usually act without stopping to think._raw`) &
    !is.na(`I would like to learn how to drive a motorcycle._raw`) &
    !is.na(`I feel proud of my accomplishments._raw`) &
    !is.na(`I get scared when I'm too nervous._raw`) &
    !is.na(`Generally, I am an impulsive person._raw`) &
    !is.na(`I am interested in experience for its own sake even if it is illegal._raw`) &
    !is.na(`I feel that I'm a failure._raw`) &
    !is.na(`I get scared when I experience unusual body sensations._raw`) &
    !is.na(`I would enjoy hiking long distances in wild and uninhabited territory._raw`) &
    !is.na(`I feel pleasant._raw`) &
    !is.na(`It scares me when I'm unable to focus on a task._raw`) &
    !is.na(`I feel I have to be manipulative to get what I want._raw`) &
    !is.na(`I am very enthusiastic about my future._raw`)
  ) %>%
  
  # Create subscale scores for each personality trait
  mutate(
    Hopelessness = rowMeans(select(., starts_with("I am content._raw"),
                                  starts_with("I am happy._raw"),
                                  starts_with("I have faith that my future holds great promise._raw"),
                                  starts_with("I feel proud of my accomplishments._raw"),
                                  starts_with("I feel that I'm a failure._raw"),
                                  starts_with("I feel pleasant._raw")), na.rm = TRUE),
    Anxiety_Sensitivity = rowMeans(select(., starts_with("It's frightening to feel dizzy or faint._raw"),
                                         starts_with("I like doing things that frighten me a little._raw"),
                                         starts_with("It frightens me when I feel my heart beat change._raw"),
                                         starts_with("I get scared when I'm too nervous._raw"),
                                         starts_with("I get scared when I experience unusual body sensations._raw")), na.rm = TRUE),
    Impulsivity = rowMeans(select(., starts_with("I often don't think things through before I speak._raw"),
                                 starts_with("I often involve myself in situations that I later regret being involved in._raw"),
                                 starts_with("I usually act without stopping to think._raw"),
                                 starts_with("Generally, I am an impulsive person._raw"),
                                 starts_with("I feel I have to be manipulative to get what I want._raw")), na.rm = TRUE),
    Sensation_Seeking = rowMeans(select(., starts_with("I would like to skydive._raw"),
                                       starts_with("I enjoy new and exciting experiences even if they are unconventional._raw"),
                                       starts_with("I would like to learn how to drive a motorcycle._raw"),
                                       starts_with("I would enjoy hiking long distances in wild and uninhabited territory._raw"),
                                       starts_with("I am very enthusiastic about my future._raw")), na.rm = TRUE)
  )

# Summarize each subscale by computing the average, standard deviation, and N
USING_SURPS_summary <- USING_SURPS_subscales %>%
  summarise(
    Hopelessness_Avg = mean(Hopelessness, na.rm = TRUE),
    Hopelessness_SD = sd(Hopelessness, na.rm = TRUE),
    Hopelessness_N = sum(!is.na(Hopelessness)),
    
    Anxiety_Sensitivity_Avg = mean(Anxiety_Sensitivity, na.rm = TRUE),
    Anxiety_Sensitivity_SD = sd(Anxiety_Sensitivity, na.rm = TRUE),
    Anxiety_Sensitivity_N = sum(!is.na(Anxiety_Sensitivity)),
    
    Impulsivity_Avg = mean(Impulsivity, na.rm = TRUE),
    Impulsivity_SD = sd(Impulsivity, na.rm = TRUE),
    Impulsivity_N = sum(!is.na(Impulsivity)),
    
    Sensation_Seeking_Avg = mean(Sensation_Seeking, na.rm = TRUE),
    Sensation_Seeking_SD = sd(Sensation_Seeking, na.rm = TRUE),
    Sensation_Seeking_N = sum(!is.na(Sensation_Seeking))
  )

# View the result
print(USING_SURPS_summary)

```

```{r}
#| label: CISS-21 subscale scoring (USING)

# Convert CISS-21 responses to numeric values
USING_CISS_21_subscales <- USING_personality %>%
  mutate(across(
    c(
      "Take some time off and get away from the situation.",
      "Focus on the problem and see how I can solve it.",
      "Blame myself for having gotten into this situation.",
      "Treat myself to a favorite food or snack.",
      "Feel anxious about not being able to cope.",
      "Think about how I solved similar problems.",
      "Visit a friend.",
      "Determine a course of action and follow it.",
      "Buy myself something.",
      "Blame myself for being too emotional about the situation.",
      "Work to understand the situation.",
      "Become very upset.",
      "Take corrective action immediately.",
      "Blame myself for not knowing what to do.",
      "Spend time with a special person.",
      "Think about the event and learn from my mistakes.",
      "Wish that I could change what had happened or how I felt.",
      "Go out for a snack or meal.",
      "Analyze my problem before reacting.",
      "Focus on my general inadequacies.",
      "Phone a friend."
    ), 
    ~ case_when(
      . == "ALMOST NEVER" ~ 1,
      . == "ALMOST ALWAYS" ~ 5,
      . == "2" ~ 2,
      . == "3" ~ 3,
      . == "4" ~ 4,
      TRUE ~ NA_real_  # In case of any other unexpected values
    ), .names = "{.col}_raw")) %>%
  
  # Reverse code the appropriate items for avoidance and emotion-oriented coping (1, 4, 7, 9, 15, 18, 21)
  mutate(
    `Take some time off and get away from the situation._raw` = 6 - `Take some time off and get away from the situation._raw`,
    `Treat myself to a favorite food or snack._raw` = 6 - `Treat myself to a favorite food or snack._raw`,
    `Visit a friend._raw` = 6 - `Visit a friend._raw`,
    `Buy myself something._raw` = 6 - `Buy myself something._raw`,
    `Spend time with a special person._raw` = 6 - `Spend time with a special person._raw`,
    `Go out for a snack or meal._raw` = 6 - `Go out for a snack or meal._raw`,
    `Phone a friend._raw` = 6 - `Phone a friend._raw`
  ) %>%
  
  # Create subscale scores for each coping style with na.rm = TRUE to handle missing values
  mutate(
    Avoidance_Coping = rowMeans(select(., starts_with("Take some time off and get away from the situation._raw"),
                                      starts_with("Treat myself to a favorite food or snack._raw"),
                                      starts_with("Visit a friend._raw"),
                                      starts_with("Buy myself something._raw"),
                                      starts_with("Spend time with a special person._raw"),
                                      starts_with("Go out for a snack or meal._raw"),
                                      starts_with("Phone a friend._raw")), na.rm = TRUE),
    
    Task_Oriented_Coping = rowMeans(select(., starts_with("Focus on the problem and see how I can solve it._raw"),
                                          starts_with("Think about how I solved similar problems._raw"),
                                          starts_with("Determine a course of action and follow it._raw"),
                                          starts_with("Work to understand the situation._raw"),
                                          starts_with("Take corrective action immediately._raw"),
                                          starts_with("Think about the event and learn from my mistakes._raw"),
                                          starts_with("Analyze my problem before reacting._raw")), na.rm = TRUE),
    
    Emotion_Oriented_Coping = rowMeans(select(., starts_with("Blame myself for having gotten into this situation._raw"),
                                            starts_with("Feel anxious about not being able to cope._raw"),
                                            starts_with("Blame myself for being too emotional about the situation._raw"),
                                            starts_with("Become very upset._raw"),
                                            starts_with("Blame myself for not knowing what to do._raw"),
                                            starts_with("Wish that I could change what had happened or how I felt._raw"),
                                            starts_with("Focus on my general inadequacies._raw")), na.rm = TRUE)
  )

# Summarize each subscale by computing the average, standard deviation, and N
USING_CISS_21_summary <- USING_CISS_21_subscales %>%
  summarise(
    Avoidance_Coping_Avg = mean(Avoidance_Coping, na.rm = TRUE),
    Avoidance_Coping_SD = sd(Avoidance_Coping, na.rm = TRUE),
    Avoidance_Coping_N = sum(!is.na(Avoidance_Coping)),
    
    Task_Oriented_Coping_Avg = mean(Task_Oriented_Coping, na.rm = TRUE),
    Task_Oriented_Coping_SD = sd(Task_Oriented_Coping, na.rm = TRUE),
    Task_Oriented_Coping_N = sum(!is.na(Task_Oriented_Coping)),
    
    Emotion_Oriented_Coping_Avg = mean(Emotion_Oriented_Coping, na.rm = TRUE),
    Emotion_Oriented_Coping_SD = sd(Emotion_Oriented_Coping, na.rm = TRUE),
    Emotion_Oriented_Coping_N = sum(!is.na(Emotion_Oriented_Coping))
  )

# View the result
print(USING_CISS_21_summary)

```

## Independent Samples t-test for Personality Calculations

```{r}

```



The `echo: false` option disables the printing of code (only output is displayed).
